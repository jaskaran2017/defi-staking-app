{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"./sub-components/Navbar\";\nimport Web3 from \"web3\";\nimport Tether from \"../truffle.abis/Tether.json\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\n\nvar App = function App() {\n  var _useState = useState(\"0x0\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState({\n    provider: null,\n    web3: null\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      web3Api = _useState4[0],\n      setWeb3Api = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      networkId = _useState6[0],\n      setNetworkId = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tether = _useState8[0],\n      setTether = _useState8[1]; // const [rwd, setRwd] = useState({});\n  // const [decentralBank, setDecentralBank] = useState({});\n  // const [stakingBalance, setStakingBalance] = useState(0);\n\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      tetherBalance = _useState10[0],\n      setTetherBalance = _useState10[1]; // const [rwdBalance, setRwdBalance] = useState(0);\n  // const [loading, setLoading] = useState(true);\n\n\n  useEffect(function () {\n    //This loadProvider method will detect metaMask and if present will connect the app to it.\n    // Otherwise it will raise an alert/warning to the user to download metaMask.\n    var loadProvider = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context.sent;\n\n                try {\n                  provider.request({\n                    method: \"eth_requestAccounts\"\n                  });\n                  setWeb3Api({\n                    web3: new Web3(provider),\n                    provider: provider\n                  });\n                } catch (error) {\n                  console.error(\"Please install MetaMask.\");\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function loadProvider() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    loadProvider();\n  }, []); // console.log(web3Api.web3);\n\n  useEffect(function () {\n    // getting the current account \n    var currentAccount = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return web3Api.web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context2.sent;\n                setAccount(accounts[0]);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function currentAccount() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    web3Api.web3 && currentAccount();\n  }, [web3Api.web3]); // console.log(networkId, \"netId\");\n  // console.log(web3Api.web3);\n  // console.log(account);\n\n  useEffect(function () {\n    //   // loading contract data from blockChain\n    var loadContract = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var network_Id, tetherData, _tether, _tetherBalance;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return web3Api.web3.eth.net.getId();\n\n              case 2:\n                network_Id = _context3.sent;\n                setNetworkId(network_Id);\n                _context3.next = 6;\n                return Tether.networks(networkId[0]);\n\n              case 6:\n                tetherData = _context3.sent;\n                console.log(tetherData);\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                _context3.next = 11;\n                return new Web3.eth.Contract(Tether.abi, tetherData.address);\n\n              case 11:\n                _tether = _context3.sent;\n                setTether({\n                  tether: _tether\n                });\n                _context3.next = 15;\n                return _tether.methods.balanceOf(account).call();\n\n              case 15:\n                _tetherBalance = _context3.sent;\n                setTetherBalance({\n                  tetherBalance: _tetherBalance.toString()\n                });\n                _context3.next = 20;\n                break;\n\n              case 19:\n                window.alert(\"Error! no network detected. Contract not deployed.\");\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function loadContract() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    web3Api.web3 && loadContract(); //   // console.log({ tether });\n    //   // console.log(tetherData.address);\n    //   // console.log({ balance: tetherBalance });\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    account: account,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","useState","useEffect","Navbar","Web3","Tether","detectEthereumProvider","App","account","setAccount","provider","web3","web3Api","setWeb3Api","networkId","setNetworkId","tether","setTether","tetherBalance","setTetherBalance","loadProvider","request","method","error","console","currentAccount","eth","getAccounts","accounts","loadContract","net","getId","network_Id","networks","tetherData","log","Contract","abi","address","methods","balanceOf","call","toString","window","alert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./sub-components/Navbar\";\nimport Web3 from \"web3\";\nimport Tether from \"../truffle.abis/Tether.json\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\n\nconst App = () => {\n  const [account, setAccount] = useState(\"0x0\");\n  const [web3Api, setWeb3Api] = useState({\n    provider: null,\n    web3: null,\n  });\n  const [networkId, setNetworkId] = useState(null);\n  const [tether, setTether] = useState({});\n  // const [rwd, setRwd] = useState({});\n  // const [decentralBank, setDecentralBank] = useState({});\n  // const [stakingBalance, setStakingBalance] = useState(0);\n  const [tetherBalance, setTetherBalance] = useState(0);\n  // const [rwdBalance, setRwdBalance] = useState(0);\n  // const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    //This loadProvider method will detect metaMask and if present will connect the app to it.\n    // Otherwise it will raise an alert/warning to the user to download metaMask.\n    const loadProvider = async () => {\n      //   // method one to detect metaMask\n      //   let provider = null;\n      //   if (window.ethereum) {\n      //     provider = window.ethereum;\n      //     try {\n      //       await provider.enable();\n      //     } catch (error) {\n      //       console.error(\"User Not Allowed.\");\n      //     }\n      //   } else if (window.web3) {\n      //     provider = await window.web3.currentProvider;\n      //   } else if (!process.env.production) {\n      //     provider = await new Web3.providers.HttpProvider(\n      //       \"http://localhost:7545\"\n      //     );\n      //   } else {\n      //     window.alert(\"Download MetaMask to run this application!\");\n      //   }\n\n      // method two to detect metamask with the the help of npm package\n      const provider = await detectEthereumProvider();\n      try {\n        provider.request({ method: \"eth_requestAccounts\" });\n        setWeb3Api({\n          web3: new Web3(provider),\n          provider,\n        });\n      } catch (error) {\n        console.error(\"Please install MetaMask.\");\n      }\n    };\n    loadProvider();\n  }, []);\n  // console.log(web3Api.web3);\n\n  useEffect(() => {\n    // getting the current account \n    const currentAccount = async () => {\n      const accounts = await web3Api.web3.eth.getAccounts();\n      setAccount(accounts[0]);\n     \n    };\n\n    web3Api.web3 && currentAccount();\n  }, [web3Api.web3]);\n  // console.log(networkId, \"netId\");\n  // console.log(web3Api.web3);\n  // console.log(account);\n\n  useEffect(() => {\n  //   // loading contract data from blockChain\n    const loadContract = async () => {\n      const network_Id = await web3Api.web3.eth.net.getId();\n      setNetworkId(network_Id);\n      const tetherData = await Tether.networks(networkId[0]);\n      console.log(tetherData);\n\n      if (tetherData) {\n        const tether = await new Web3.eth.Contract(\n          Tether.abi,\n          tetherData.address\n        );\n        setTether({ tether });\n        let tetherBalance = await tether.methods.balanceOf(account).call();\n        setTetherBalance({ tetherBalance: tetherBalance.toString() });\n      } else {\n        window.alert(`Error! no network detected. Contract not deployed.`);\n      }\n    };\n   \n    web3Api.web3 &&  loadContract();\n  //   // console.log({ tether });\n  //   // console.log(tetherData.address);\n  //   // console.log({ balance: tetherBalance });\n  }, []);\n\n  return (\n    <>\n      <Navbar account={account} />\n    </>\n  );\n};\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}