{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path = require(\"path\");\n\nvar deep_1 = require(\"./filters/deep\");\n\nvar entry_1 = require(\"./filters/entry\");\n\nvar error_1 = require(\"./filters/error\");\n\nvar entry_2 = require(\"./transformers/entry\");\n\nvar Provider = /*#__PURE__*/function () {\n  function Provider(_settings) {\n    _classCallCheck(this, Provider);\n\n    this._settings = _settings;\n    this.errorFilter = new error_1.default(this._settings);\n    this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());\n    this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());\n    this.entryTransformer = new entry_2.default(this._settings);\n  }\n\n  _createClass(Provider, [{\n    key: \"_getRootDirectory\",\n    value: function _getRootDirectory(task) {\n      return path.resolve(this._settings.cwd, task.base);\n    }\n  }, {\n    key: \"_getReaderOptions\",\n    value: function _getReaderOptions(task) {\n      var basePath = task.base === '.' ? '' : task.base;\n      return {\n        basePath: basePath,\n        pathSegmentSeparator: '/',\n        concurrency: this._settings.concurrency,\n        deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),\n        entryFilter: this.entryFilter.getFilter(task.positive, task.negative),\n        errorFilter: this.errorFilter.getFilter(),\n        followSymbolicLinks: this._settings.followSymbolicLinks,\n        fs: this._settings.fs,\n        stats: this._settings.stats,\n        throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,\n        transform: this.entryTransformer.getTransformer()\n      };\n    }\n  }, {\n    key: \"_getMicromatchOptions\",\n    value: function _getMicromatchOptions() {\n      return {\n        dot: this._settings.dot,\n        matchBase: this._settings.baseNameMatch,\n        nobrace: !this._settings.braceExpansion,\n        nocase: !this._settings.caseSensitiveMatch,\n        noext: !this._settings.extglob,\n        noglobstar: !this._settings.globstar,\n        posix: true,\n        strictSlashes: false\n      };\n    }\n  }]);\n\n  return Provider;\n}();\n\nexports.default = Provider;","map":null,"metadata":{},"sourceType":"script"}