{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveDefaultsAtRules;\nexports.elementSelectorParser = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _featureFlags = require(\"../featureFlags\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar getNode = {\n  id: function id(node) {\n    return _postcssSelectorParser.default.attribute({\n      attribute: 'id',\n      operator: '=',\n      value: node.value,\n      quoteMark: '\"'\n    });\n  }\n};\n\nfunction minimumImpactSelector(nodes) {\n  var rest = nodes.filter(function (node) {\n    // Keep non-pseudo nodes\n    if (node.type !== 'pseudo') return true; // Keep pseudo nodes that have subnodes\n    // E.g.: `:not()` contains subnodes inside the parentheses\n\n    if (node.nodes.length > 0) return true; // Keep pseudo `elements`\n    // This implicitly means that we ignore pseudo `classes`\n\n    return node.value.startsWith('::') || [':before', ':after', ':first-line', ':first-letter'].includes(node.value);\n  }).reverse();\n  var searchFor = new Set(['tag', 'class', 'id', 'attribute']);\n  var splitPointIdx = rest.findIndex(function (n) {\n    return searchFor.has(n.type);\n  });\n  if (splitPointIdx === -1) return rest.reverse().join('').trim();\n  var node1 = rest[splitPointIdx];\n  var bestNode = getNode[node1.type] ? getNode[node1.type](node1) : node1;\n  rest = rest.slice(0, splitPointIdx);\n  var combinatorIdx = rest.findIndex(function (n) {\n    return n.type === 'combinator' && n.value === '>';\n  });\n\n  if (combinatorIdx !== -1) {\n    rest.splice(0, combinatorIdx);\n    rest.unshift(_postcssSelectorParser.default.universal());\n  }\n\n  return [bestNode].concat(_toConsumableArray(rest.reverse())).join('').trim();\n}\n\nvar elementSelectorParser = (0, _postcssSelectorParser).default(function (selectors) {\n  return selectors.map(function (s) {\n    var nodes = s.split(function (n) {\n      return n.type === 'combinator' && n.value === ' ';\n    }).pop();\n    return minimumImpactSelector(nodes);\n  });\n});\nexports.elementSelectorParser = elementSelectorParser;\nvar cache = new Map();\n\nfunction extractElementSelector(selector) {\n  if (!cache.has(selector)) {\n    cache.set(selector, elementSelectorParser.transformSync(selector));\n  }\n\n  return cache.get(selector);\n}\n\nfunction resolveDefaultsAtRules(_ref) {\n  var tailwindConfig = _ref.tailwindConfig;\n  return function (root) {\n    var variableNodeMap = new Map();\n    /** @type {Set<import('postcss').AtRule>} */\n\n    var universals = new Set();\n    root.walkAtRules('defaults', function (rule) {\n      if (rule.nodes && rule.nodes.length > 0) {\n        universals.add(rule);\n        return;\n      }\n\n      var variable = rule.params;\n\n      if (!variableNodeMap.has(variable)) {\n        variableNodeMap.set(variable, new Set());\n      }\n\n      variableNodeMap.get(variable).add(rule.parent);\n      rule.remove();\n    });\n\n    var _iterator = _createForOfIteratorHelper(universals),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var universal = _step.value;\n\n        /** @type {Map<string, Set<string>>} */\n        var selectorGroups = new Map();\n        var ref;\n        var rules = (ref = variableNodeMap.get(universal.params)) !== null && ref !== void 0 ? ref : [];\n\n        var _iterator2 = _createForOfIteratorHelper(rules),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var rule = _step2.value;\n\n            var _iterator4 = _createForOfIteratorHelper(extractElementSelector(rule.selector)),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var selector = _step4.value;\n                // If selector contains a vendor prefix after a pseudo element or class,\n                // we consider them separately because merging the declarations into\n                // a single rule will cause browsers that do not understand the\n                // vendor prefix to throw out the whole rule\n                var selectorGroupName = selector.includes(':-') || selector.includes('::-') ? selector : '__DEFAULT__';\n                var ref1;\n\n                var _selectors = (ref1 = selectorGroups.get(selectorGroupName)) !== null && ref1 !== void 0 ? ref1 : new Set();\n\n                selectorGroups.set(selectorGroupName, _selectors);\n\n                _selectors.add(selector);\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        if ((0, _featureFlags).flagEnabled(tailwindConfig, 'optimizeUniversalDefaults')) {\n          if (selectorGroups.size === 0) {\n            universal.remove();\n            continue;\n          }\n\n          var _iterator3 = _createForOfIteratorHelper(selectorGroups),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _step3$value = _slicedToArray(_step3.value, 2),\n                  selectors = _step3$value[1];\n\n              var universalRule = _postcss.default.rule();\n\n              universalRule.selectors = _toConsumableArray(selectors);\n              universalRule.append(universal.nodes.map(function (node) {\n                return node.clone();\n              }));\n              universal.before(universalRule);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        } else {\n          var _universalRule = _postcss.default.rule();\n\n          _universalRule.selectors = ['*', '::before', '::after'];\n\n          _universalRule.append(universal.nodes);\n\n          universal.before(_universalRule);\n        }\n\n        universal.remove();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}