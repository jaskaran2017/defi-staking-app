{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Web3 from \"web3\";\nimport Tether from \"../truffle.abis/Tether.json\";\nimport RWD from \"../truffle.abis/RWD.json\";\nimport DecentralBank from \"../truffle.abis/DecentralBank.json\"; /////////\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockChainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }() //function 1.\n    // injecting web3 to detect metamask wallet\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                //if the metaMask is present on the browser then we will enable it automatically\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"No ethereum browser detected. Download metaMask.\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() // function 2Ô∏è\n    //loading BlockChainData\n\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // getting the account number\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                console.log(accounts[0]);\n                this.setState({\n                  account: accounts[0]\n                }); // getting network Id to load smart contract\n\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                console.log(networkId); // After getting network Id now get the tether contract\n\n                tetherData = Tether.networks[networkId]; // console.log(tetherData);\n\n                if (!tetherData) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 16;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 16:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                }); // console.log(\"Tether-balance\", tetherBalance);\n\n                _context3.next = 21;\n                break;\n\n              case 20:\n                window.alert(\"Error, no contract deployed, no detected network.\");\n\n              case 21:\n                // Load reward contract\n                rwdData = RWD.networks[networkId]; // console.log(rwdData);\n\n                if (!rwdData) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                }); // fetching balance from rwd contract\n\n                _context3.next = 27;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 27:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                }); // console.log(\"RWD-balance\", rwdBalance);\n\n                _context3.next = 32;\n                break;\n\n              case 31:\n                window.alert(\"Error! no contract deployed(RWD).\");\n\n              case 32:\n                // Load decentralBank contract\n                decentralBankData = DecentralBank.networks[networkId]; // console.log(\"Bank\", decentralBankData);\n\n                if (!decentralBankData) {\n                  _context3.next = 43;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                }); // fetch staking balance\n\n                _context3.next = 38;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 38:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log(\"staked-Balance\", stakingBalance);\n                _context3.next = 44;\n                break;\n\n              case 43:\n                window.alert(\"Error! no contract deployed(decentralBank).\");\n\n              case 44:\n                this.setState({\n                  loading: false\n                });\n\n              case 45:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }() // constructor to set states\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: \"0x0\",\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: \"0\",\n      rwdBalance: \"0\",\n      stakingBalance: \"0\",\n      loading: true\n    };\n    return _this;\n  } // react code for frontend\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      }), \"h1\");\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","App","loadWeb3","loadBlockChainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Web3 from \"web3\";\nimport Tether from \"../truffle.abis/Tether.json\";\nimport RWD from \"../truffle.abis/RWD.json\";\nimport DecentralBank from \"../truffle.abis/DecentralBank.json\";\n\n/////////\nexport default class App extends Component {\n  async UNSAFE_componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockChainData();\n  }\n\n  //function 1.\n  // injecting web3 to detect metamask wallet\n  async loadWeb3() {\n    if (window.ethereum) {\n      //if the metaMask is present on the browser then we will enable it automatically\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"No ethereum browser detected. Download metaMask.\");\n    }\n  }\n  // function 2Ô∏è\n  //loading BlockChainData\n  async loadBlockChainData() {\n    // getting the account number\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts[0]);\n    this.setState({ account: accounts[0] });\n\n    // getting network Id to load smart contract\n    const networkId = await web3.eth.net.getId();\n    console.log(networkId);\n\n    // After getting network Id now get the tether contract\n    const tetherData = Tether.networks[networkId];\n    // console.log(tetherData);\n    if (tetherData) {\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n      this.setState({ tether });\n      let tetherBalance = await tether.methods\n        .balanceOf(this.state.account)\n        .call();\n      this.setState({ tetherBalance: tetherBalance.toString() });\n      // console.log(\"Tether-balance\", tetherBalance);\n    } else {\n      window.alert(\"Error, no contract deployed, no detected network.\");\n    }\n\n    // Load reward contract\n    const rwdData = RWD.networks[networkId];\n    // console.log(rwdData);\n    if (rwdData) {\n      const rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n      this.setState({ rwd });\n      // fetching balance from rwd contract\n      let rwdBalance = await rwd.methods.balanceOf(this.state.account).call();\n      this.setState({ rwdBalance: rwdBalance.toString() });\n      // console.log(\"RWD-balance\", rwdBalance);\n    } else {\n      window.alert(\"Error! no contract deployed(RWD).\");\n    }\n\n    // Load decentralBank contract\n    const decentralBankData = DecentralBank.networks[networkId];\n    // console.log(\"Bank\", decentralBankData);\n\n    if (decentralBankData) {\n      const decentralBank = new web3.eth.Contract(\n        DecentralBank.abi,\n        decentralBankData.address\n      );\n      this.setState({ decentralBank });\n\n      // fetch staking balance\n      let stakingBalance = await decentralBank.methods\n        .stakingBalance(this.state.account)\n        .call();\n      this.setState({ stakingBalance: stakingBalance.toString() });\n      console.log(\"staked-Balance\", stakingBalance);\n    } else {\n      window.alert(\"Error! no contract deployed(decentralBank).\");\n    }\n\n    this.setState({ loading: false });\n  }\n\n  // constructor to set states\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"0x0\",\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: \"0\",\n      rwdBalance: \"0\",\n      stakingBalance: \"0\",\n      loading: true,\n    };\n  }\n  // react code for frontend\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        h1\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}