{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseColor = parseColor;\nexports.formatColor = formatColor;\n\nvar _colorName = _interopRequireDefault(require(\"color-name\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar HEX = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i;\nvar SHORT_HEX = /^#([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i;\nvar VALUE = \"(?:\\\\d+|\\\\d*\\\\.\\\\d+)%?\";\nvar SEP = \"(?:\\\\s*,\\\\s*|\\\\s+)\";\nvar ALPHA_SEP = \"\\\\s*[,/]\\\\s*\";\nvar RGB = new RegExp(\"^rgba?\\\\(\\\\s*(\".concat(VALUE, \")\").concat(SEP, \"(\").concat(VALUE, \")\").concat(SEP, \"(\").concat(VALUE, \")(?:\").concat(ALPHA_SEP, \"(\").concat(VALUE, \"))?\\\\s*\\\\)$\"));\nvar HSL = new RegExp(\"^hsla?\\\\(\\\\s*((?:\".concat(VALUE, \")(?:deg|rad|grad|turn)?)\").concat(SEP, \"(\").concat(VALUE, \")\").concat(SEP, \"(\").concat(VALUE, \")(?:\").concat(ALPHA_SEP, \"(\").concat(VALUE, \"))?\\\\s*\\\\)$\"));\n\nfunction parseColor(value) {\n  if (typeof value !== 'string') {\n    return null;\n  }\n\n  value = value.trim();\n\n  if (value === 'transparent') {\n    return {\n      mode: 'rgb',\n      color: ['0', '0', '0'],\n      alpha: '0'\n    };\n  }\n\n  if (value in _colorName.default) {\n    return {\n      mode: 'rgb',\n      color: _colorName.default[value].map(function (v) {\n        return v.toString();\n      })\n    };\n  }\n\n  var hex = value.replace(SHORT_HEX, function (_, r, g, b, a) {\n    return ['#', r, r, g, g, b, b, a ? a + a : ''].join('');\n  }).match(HEX);\n\n  if (hex !== null) {\n    return {\n      mode: 'rgb',\n      color: [parseInt(hex[1], 16), parseInt(hex[2], 16), parseInt(hex[3], 16)].map(function (v) {\n        return v.toString();\n      }),\n      alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : undefined\n    };\n  }\n\n  var rgbMatch = value.match(RGB);\n\n  if (rgbMatch !== null) {\n    var ref, ref1;\n    return {\n      mode: 'rgb',\n      color: [rgbMatch[1], rgbMatch[2], rgbMatch[3]].map(function (v) {\n        return v.toString();\n      }),\n      alpha: (ref = rgbMatch[4]) === null || ref === void 0 ? void 0 : (ref1 = ref.toString) === null || ref1 === void 0 ? void 0 : ref1.call(ref)\n    };\n  }\n\n  var hslMatch = value.match(HSL);\n\n  if (hslMatch !== null) {\n    var ref2, ref3;\n    return {\n      mode: 'hsl',\n      color: [hslMatch[1], hslMatch[2], hslMatch[3]].map(function (v) {\n        return v.toString();\n      }),\n      alpha: (ref2 = hslMatch[4]) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.toString) === null || ref3 === void 0 ? void 0 : ref3.call(ref2)\n    };\n  }\n\n  return null;\n}\n\nfunction formatColor(_ref) {\n  var mode = _ref.mode,\n      color = _ref.color,\n      alpha = _ref.alpha;\n  var hasAlpha = alpha !== undefined;\n  return \"\".concat(mode, \"(\").concat(color.join(' ')).concat(hasAlpha ? \" / \".concat(alpha) : '', \")\");\n}","map":null,"metadata":{},"sourceType":"script"}