{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveDebug = resolveDebug;\nexports.NOT_ON_DEMAND = exports.contextSourcesMap = exports.configContextMap = exports.contextMap = exports.env = void 0;\nvar env = {\n  NODE_ENV: process.env.NODE_ENV,\n  DEBUG: resolveDebug(process.env.DEBUG)\n};\nexports.env = env;\nvar contextMap = new Map();\nexports.contextMap = contextMap;\nvar configContextMap = new Map();\nexports.configContextMap = configContextMap;\nvar contextSourcesMap = new Map();\nexports.contextSourcesMap = contextSourcesMap;\nvar NOT_ON_DEMAND = new String('*');\nexports.NOT_ON_DEMAND = NOT_ON_DEMAND;\n\nfunction resolveDebug(debug) {\n  if (debug === undefined) {\n    return false;\n  } // Environment variables are strings, so convert to boolean\n\n\n  if (debug === 'true' || debug === '1') {\n    return true;\n  }\n\n  if (debug === 'false' || debug === '0') {\n    return false;\n  } // Keep the debug convention into account:\n  // DEBUG=* -> This enables all debug modes\n  // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC\n  // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)\n  // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB\n\n\n  if (debug === '*') {\n    return true;\n  }\n\n  var debuggers = debug.split(',').map(function (d) {\n    return d.split(':')[0];\n  }); // Ignoring tailwindcss\n\n  if (debuggers.includes('-tailwindcss')) {\n    return false;\n  } // Including tailwindcss\n\n\n  if (debuggers.includes('tailwindcss')) {\n    return true;\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}