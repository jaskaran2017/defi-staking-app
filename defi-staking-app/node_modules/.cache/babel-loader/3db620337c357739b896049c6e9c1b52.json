{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalize = normalize;\nexports.url = url;\nexports.number = number;\nexports.percentage = percentage;\nexports.length = length;\nexports.lineWidth = lineWidth;\nexports.shadow = shadow;\nexports.color = color;\nexports.image = image;\nexports.gradient = gradient;\nexports.position = position;\nexports.familyName = familyName;\nexports.genericName = genericName;\nexports.absoluteSize = absoluteSize;\nexports.relativeSize = relativeSize;\n\nvar _color = require(\"./color\");\n\nvar _parseBoxShadowValue = require(\"./parseBoxShadowValue\");\n\nvar cssFunctions = ['min', 'max', 'clamp', 'calc']; // Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types\n\nvar COMMA = /,(?![^(]*\\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.\n;\nvar UNDERSCORE = /_(?![^(]*\\))/g // Underscore separator that is not located between brackets. E.g.: `rgba(255,_255,_255)_black` these don't count.\n;\n\nfunction normalize(value) {\n  var isRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  // Keep raw strings if it starts with `url(`\n  if (value.includes('url(')) {\n    return value.split(/(url\\(.*?\\))/g).filter(Boolean).map(function (part) {\n      if (/^url\\(.*?\\)$/.test(part)) {\n        return part;\n      }\n\n      return normalize(part, false);\n    }).join('');\n  } // Convert `_` to ` `, except for escaped underscores `\\_`\n\n\n  value = value.replace(/([^\\\\])_+/g, function (fullMatch, characterBefore) {\n    return characterBefore + ' '.repeat(fullMatch.length - 1);\n  }).replace(/^_/g, ' ').replace(/\\\\_/g, '_'); // Remove leftover whitespace\n\n  if (isRoot) {\n    value = value.trim();\n  } // Add spaces around operators inside calc() that do not follow an operator\n  // or '('.\n\n\n  return value.replace(/(-?\\d*\\.?\\d(?!\\b-.+[,)](?![^+\\-/*])\\D)(?:%|[a-z]+)?|\\))([+\\-/*])/g, '$1 $2 ');\n}\n\nfunction url(value) {\n  return value.startsWith('url(');\n}\n\nfunction number(value) {\n  return !isNaN(Number(value)) || cssFunctions.some(function (fn) {\n    return new RegExp(\"^\".concat(fn, \"\\\\(.+?\")).test(value);\n  });\n}\n\nfunction percentage(value) {\n  return /%$/g.test(value) || cssFunctions.some(function (fn) {\n    return new RegExp(\"^\".concat(fn, \"\\\\(.+?%\")).test(value);\n  });\n}\n\nvar lengthUnits = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px', 'em', 'ex', 'ch', 'rem', 'lh', 'vw', 'vh', 'vmin', 'vmax'];\nvar lengthUnitsPattern = \"(?:\".concat(lengthUnits.join('|'), \")\");\n\nfunction length(value) {\n  return value.split(UNDERSCORE).every(function (part) {\n    return part === '0' || new RegExp(\"\".concat(lengthUnitsPattern, \"$\")).test(part) || cssFunctions.some(function (fn) {\n      return new RegExp(\"^\".concat(fn, \"\\\\(.+?\").concat(lengthUnitsPattern)).test(part);\n    });\n  });\n}\n\nvar lineWidths = new Set(['thin', 'medium', 'thick']);\n\nfunction lineWidth(value) {\n  return lineWidths.has(value);\n}\n\nfunction shadow(value) {\n  var parsedShadows = (0, _parseBoxShadowValue).parseBoxShadowValue(normalize(value));\n\n  var _iterator = _createForOfIteratorHelper(parsedShadows),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var parsedShadow = _step.value;\n\n      if (!parsedShadow.valid) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n}\n\nfunction color(value) {\n  var colors = 0;\n  var result = value.split(UNDERSCORE).every(function (part) {\n    part = normalize(part);\n    if (part.startsWith('var(')) return true;\n    if ((0, _color).parseColor(part) !== null) return colors++, true;\n    return false;\n  });\n  if (!result) return false;\n  return colors > 0;\n}\n\nfunction image(value) {\n  var images = 0;\n  var result = value.split(COMMA).every(function (part) {\n    part = normalize(part);\n    if (part.startsWith('var(')) return true;\n\n    if (url(part) || gradient(part) || ['element(', 'image(', 'cross-fade(', 'image-set('].some(function (fn) {\n      return part.startsWith(fn);\n    })) {\n      images++;\n      return true;\n    }\n\n    return false;\n  });\n  if (!result) return false;\n  return images > 0;\n}\n\nvar gradientTypes = new Set(['linear-gradient', 'radial-gradient', 'repeating-linear-gradient', 'repeating-radial-gradient', 'conic-gradient']);\n\nfunction gradient(value) {\n  value = normalize(value);\n\n  var _iterator2 = _createForOfIteratorHelper(gradientTypes),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var type = _step2.value;\n\n      if (value.startsWith(\"\".concat(type, \"(\"))) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return false;\n}\n\nvar validPositions = new Set(['center', 'top', 'right', 'bottom', 'left']);\n\nfunction position(value) {\n  var positions = 0;\n  var result = value.split(UNDERSCORE).every(function (part) {\n    part = normalize(part);\n    if (part.startsWith('var(')) return true;\n\n    if (validPositions.has(part) || length(part) || percentage(part)) {\n      positions++;\n      return true;\n    }\n\n    return false;\n  });\n  if (!result) return false;\n  return positions > 0;\n}\n\nfunction familyName(value) {\n  var fonts = 0;\n  var result = value.split(COMMA).every(function (part) {\n    part = normalize(part);\n    if (part.startsWith('var(')) return true; // If it contains spaces, then it should be quoted\n\n    if (part.includes(' ')) {\n      if (!/(['\"])([^\"']+)\\1/g.test(part)) {\n        return false;\n      }\n    } // If it starts with a number, it's invalid\n\n\n    if (/^\\d/g.test(part)) {\n      return false;\n    }\n\n    fonts++;\n    return true;\n  });\n  if (!result) return false;\n  return fonts > 0;\n}\n\nvar genericNames = new Set(['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui', 'ui-serif', 'ui-sans-serif', 'ui-monospace', 'ui-rounded', 'math', 'emoji', 'fangsong']);\n\nfunction genericName(value) {\n  return genericNames.has(value);\n}\n\nvar absoluteSizes = new Set(['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'x-large', 'xxx-large']);\n\nfunction absoluteSize(value) {\n  return absoluteSizes.has(value);\n}\n\nvar relativeSizes = new Set(['larger', 'smaller']);\n\nfunction relativeSize(value) {\n  return relativeSizes.has(value);\n}","map":null,"metadata":{},"sourceType":"script"}