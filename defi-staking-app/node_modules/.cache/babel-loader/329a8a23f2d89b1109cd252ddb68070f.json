{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatVariantSelector = formatVariantSelector;\nexports.finalizeSelector = finalizeSelector;\nexports.selectorFunctions = void 0;\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _unesc = _interopRequireDefault(require(\"postcss-selector-parser/dist/util/unesc\"));\n\nvar _escapeClassName = _interopRequireDefault(require(\"../util/escapeClassName\"));\n\nvar _prefixSelector = _interopRequireDefault(require(\"../util/prefixSelector\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MERGE = ':merge';\nvar PARENT = '&';\nvar selectorFunctions = new Set([MERGE]);\nexports.selectorFunctions = selectorFunctions;\n\nfunction formatVariantSelector(current) {\n  for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    others[_key - 1] = arguments[_key];\n  }\n\n  for (var _i = 0, _others = others; _i < _others.length; _i++) {\n    var other = _others[_i];\n    var incomingValue = resolveFunctionArgument(other, MERGE);\n\n    if (incomingValue !== null) {\n      var existingValue = resolveFunctionArgument(current, MERGE, incomingValue);\n\n      if (existingValue !== null) {\n        var existingTarget = \"\".concat(MERGE, \"(\").concat(incomingValue, \")\");\n        var splitIdx = other.indexOf(existingTarget);\n        var addition = other.slice(splitIdx + existingTarget.length).split(' ')[0];\n        current = current.replace(existingTarget, existingTarget + addition);\n        continue;\n      }\n    }\n\n    current = other.replace(PARENT, current);\n  }\n\n  return current;\n}\n\nfunction finalizeSelector(format, _ref) {\n  var selector1 = _ref.selector,\n      candidate = _ref.candidate,\n      context = _ref.context;\n  var ref, ref1;\n  var ref2;\n  var separator = (ref2 = context === null || context === void 0 ? void 0 : (ref = context.tailwindConfig) === null || ref === void 0 ? void 0 : ref.separator) !== null && ref2 !== void 0 ? ref2 : ':'; // Split by the separator, but ignore the separator inside square brackets:\n  //\n  // E.g.: dark:lg:hover:[paint-order:markers]\n  //           ┬  ┬     ┬            ┬\n  //           │  │     │            ╰── We will not split here\n  //           ╰──┴─────┴─────────────── We will split here\n  //\n\n  var splitter = new RegExp(\"\\\\\".concat(separator, \"(?![^[]*\\\\])\"));\n  var base = candidate.split(splitter).pop();\n\n  if (context === null || context === void 0 ? void 0 : (ref1 = context.tailwindConfig) === null || ref1 === void 0 ? void 0 : ref1.prefix) {\n    format = (0, _prefixSelector).default(context.tailwindConfig.prefix, format);\n  }\n\n  format = format.replace(PARENT, \".\".concat((0, _escapeClassName).default(candidate))); // Normalize escaped classes, e.g.:\n  //\n  // The idea would be to replace the escaped `base` in the selector with the\n  // `format`. However, in css you can escape the same selector in a few\n  // different ways. This would result in different strings and therefore we\n  // can't replace it properly.\n  //\n  //               base: bg-[rgb(255,0,0)]\n  //   base in selector: bg-\\\\[rgb\\\\(255\\\\,0\\\\,0\\\\)\\\\]\n  //       escaped base: bg-\\\\[rgb\\\\(255\\\\2c 0\\\\2c 0\\\\)\\\\]\n  //\n\n  selector1 = (0, _postcssSelectorParser).default(function (selectors) {\n    return selectors.walkClasses(function (node) {\n      if (node.raws && node.value.includes(base)) {\n        node.raws.value = (0, _escapeClassName).default((0, _unesc).default(node.raws.value));\n      }\n\n      return node;\n    });\n  }).processSync(selector1); // We can safely replace the escaped base now, since the `base` section is\n  // now in a normalized escaped value.\n\n  selector1 = selector1.replace(\".\".concat((0, _escapeClassName).default(base)), format); // Remove unnecessary pseudo selectors that we used as placeholders\n\n  return (0, _postcssSelectorParser).default(function (selectors) {\n    return selectors.map(function (selector2) {\n      selector2.walkPseudos(function (p) {\n        if (selectorFunctions.has(p.value)) {\n          p.replaceWith(p.nodes);\n        }\n\n        return p;\n      }); // This will make sure to move pseudo's to the correct spot (the end for\n      // pseudo elements) because otherwise the selector will never work\n      // anyway.\n      //\n      // E.g.:\n      //  - `before:hover:text-center` would result in `.before\\:hover\\:text-center:hover::before`\n      //  - `hover:before:text-center` would result in `.hover\\:before\\:text-center:hover::before`\n      //\n      // `::before:hover` doesn't work, which means that we can make it work for you by flipping the order.\n\n      function collectPseudoElements(selector) {\n        var nodes = [];\n\n        var _iterator = _createForOfIteratorHelper(selector.nodes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value;\n\n            if (isPseudoElement(node)) {\n              nodes.push(node);\n              selector.removeChild(node);\n            }\n\n            if (node === null || node === void 0 ? void 0 : node.nodes) {\n              nodes.push.apply(nodes, _toConsumableArray(collectPseudoElements(node)));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return nodes;\n      }\n\n      var pseudoElements = collectPseudoElements(selector2);\n\n      if (pseudoElements.length > 0) {\n        selector2.nodes.push(pseudoElements.sort(sortSelector));\n      }\n\n      return selector2;\n    });\n  }).processSync(selector1);\n} // Note: As a rule, double colons (::) should be used instead of a single colon\n// (:). This distinguishes pseudo-classes from pseudo-elements. However, since\n// this distinction was not present in older versions of the W3C spec, most\n// browsers support both syntaxes for the original pseudo-elements.\n\n\nvar pseudoElementsBC = [':before', ':after', ':first-line', ':first-letter']; // These pseudo-elements _can_ be combined with other pseudo selectors AND the order does matter.\n\nvar pseudoElementExceptions = ['::file-selector-button']; // This will make sure to move pseudo's to the correct spot (the end for\n// pseudo elements) because otherwise the selector will never work\n// anyway.\n//\n// E.g.:\n//  - `before:hover:text-center` would result in `.before\\:hover\\:text-center:hover::before`\n//  - `hover:before:text-center` would result in `.hover\\:before\\:text-center:hover::before`\n//\n// `::before:hover` doesn't work, which means that we can make it work\n// for you by flipping the order.\n\nfunction sortSelector(a, z) {\n  // Both nodes are non-pseudo's so we can safely ignore them and keep\n  // them in the same order.\n  if (a.type !== 'pseudo' && z.type !== 'pseudo') {\n    return 0;\n  } // If one of them is a combinator, we need to keep it in the same order\n  // because that means it will start a new \"section\" in the selector.\n\n\n  if (a.type === 'combinator' ^ z.type === 'combinator') {\n    return 0;\n  } // One of the items is a pseudo and the other one isn't. Let's move\n  // the pseudo to the right.\n\n\n  if (a.type === 'pseudo' ^ z.type === 'pseudo') {\n    return (a.type === 'pseudo') - (z.type === 'pseudo');\n  } // Both are pseudo's, move the pseudo elements (except for\n  // ::file-selector-button) to the right.\n\n\n  return isPseudoElement(a) - isPseudoElement(z);\n}\n\nfunction isPseudoElement(node) {\n  if (node.type !== 'pseudo') return false;\n  if (pseudoElementExceptions.includes(node.value)) return false;\n  return node.value.startsWith('::') || pseudoElementsBC.includes(node.value);\n}\n\nfunction resolveFunctionArgument(haystack, needle, arg) {\n  var startIdx = haystack.indexOf(arg ? \"\".concat(needle, \"(\").concat(arg, \")\") : needle);\n  if (startIdx === -1) return null; // Start inside the `(`\n\n  startIdx += needle.length + 1;\n  var target = '';\n  var count = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(haystack.slice(startIdx)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var char = _step2.value;\n\n      if (char !== '(' && char !== ')') {\n        target += char;\n      } else if (char === '(') {\n        target += char;\n        count++;\n      } else if (char === ')') {\n        if (--count < 0) break; // unbalanced\n\n        target += char;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return target;\n}","map":null,"metadata":{},"sourceType":"script"}