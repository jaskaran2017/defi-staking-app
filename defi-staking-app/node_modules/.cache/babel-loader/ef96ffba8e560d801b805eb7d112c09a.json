{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateAllClasses = updateAllClasses;\nexports.asValue = asValue;\nexports.asColor = asColor;\nexports.asLookupValue = asLookupValue;\nexports.coerceValue = coerceValue;\n\nvar _postcssSelectorParser = _interopRequireDefault(require(\"postcss-selector-parser\"));\n\nvar _escapeCommas = _interopRequireDefault(require(\"./escapeCommas\"));\n\nvar _withAlphaVariable = require(\"./withAlphaVariable\");\n\nvar _dataTypes = require(\"./dataTypes\");\n\nvar _negateValue = _interopRequireDefault(require(\"./negateValue\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction updateAllClasses(selectors1, updateClass) {\n  var parser = (0, _postcssSelectorParser).default(function (selectors) {\n    selectors.walkClasses(function (sel) {\n      var updatedClass = updateClass(sel.value);\n      sel.value = updatedClass;\n\n      if (sel.raws && sel.raws.value) {\n        sel.raws.value = (0, _escapeCommas).default(sel.raws.value);\n      }\n    });\n  });\n  var result = parser.processSync(selectors1);\n  return result;\n}\n\nfunction resolveArbitraryValue(modifier, validate) {\n  if (!isArbitraryValue(modifier)) {\n    return undefined;\n  }\n\n  var value = modifier.slice(1, -1);\n\n  if (!validate(value)) {\n    return undefined;\n  }\n\n  return (0, _dataTypes).normalize(value);\n}\n\nfunction asNegativeValue(modifier) {\n  var lookup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var validate = arguments.length > 2 ? arguments[2] : undefined;\n  var positiveValue = lookup[modifier];\n\n  if (positiveValue !== undefined) {\n    return (0, _negateValue).default(positiveValue);\n  }\n\n  if (isArbitraryValue(modifier)) {\n    var resolved = resolveArbitraryValue(modifier, validate);\n\n    if (resolved === undefined) {\n      return undefined;\n    }\n\n    return (0, _negateValue).default(resolved);\n  }\n}\n\nfunction asValue(modifier) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$validate = _ref.validate,\n      validate = _ref$validate === void 0 ? function () {\n    return true;\n  } : _ref$validate;\n\n  var ref;\n  var value = (ref = options.values) === null || ref === void 0 ? void 0 : ref[modifier];\n\n  if (value !== undefined) {\n    return value;\n  }\n\n  if (options.supportsNegativeValues && modifier.startsWith('-')) {\n    return asNegativeValue(modifier.slice(1), options.values, validate);\n  }\n\n  return resolveArbitraryValue(modifier, validate);\n}\n\nfunction isArbitraryValue(input) {\n  return input.startsWith('[') && input.endsWith(']');\n}\n\nfunction splitAlpha(modifier) {\n  var slashIdx = modifier.lastIndexOf('/');\n\n  if (slashIdx === -1 || slashIdx === modifier.length - 1) {\n    return [modifier];\n  }\n\n  return [modifier.slice(0, slashIdx), modifier.slice(slashIdx + 1)];\n}\n\nfunction asColor(modifier) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$tailwindConfig = _ref2.tailwindConfig,\n      tailwindConfig = _ref2$tailwindConfig === void 0 ? {} : _ref2$tailwindConfig;\n\n  var ref;\n\n  if (((ref = options.values) === null || ref === void 0 ? void 0 : ref[modifier]) !== undefined) {\n    var ref1;\n    return (ref1 = options.values) === null || ref1 === void 0 ? void 0 : ref1[modifier];\n  }\n\n  var _splitAlpha = splitAlpha(modifier),\n      _splitAlpha2 = _slicedToArray(_splitAlpha, 2),\n      color = _splitAlpha2[0],\n      alpha = _splitAlpha2[1];\n\n  if (alpha !== undefined) {\n    var ref2, ref3, ref4;\n    var ref5;\n    var normalizedColor = (ref5 = (ref2 = options.values) === null || ref2 === void 0 ? void 0 : ref2[color]) !== null && ref5 !== void 0 ? ref5 : isArbitraryValue(color) ? color.slice(1, -1) : undefined;\n\n    if (normalizedColor === undefined) {\n      return undefined;\n    }\n\n    if (isArbitraryValue(alpha)) {\n      return (0, _withAlphaVariable).withAlphaValue(normalizedColor, alpha.slice(1, -1));\n    }\n\n    if (((ref3 = tailwindConfig.theme) === null || ref3 === void 0 ? void 0 : (ref4 = ref3.opacity) === null || ref4 === void 0 ? void 0 : ref4[alpha]) === undefined) {\n      return undefined;\n    }\n\n    return (0, _withAlphaVariable).withAlphaValue(normalizedColor, tailwindConfig.theme.opacity[alpha]);\n  }\n\n  return asValue(modifier, options, {\n    validate: _dataTypes.color\n  });\n}\n\nfunction asLookupValue(modifier) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var ref;\n  return (ref = options.values) === null || ref === void 0 ? void 0 : ref[modifier];\n}\n\nfunction guess(validate) {\n  return function (modifier, options) {\n    return asValue(modifier, options, {\n      validate: validate\n    });\n  };\n}\n\nvar typeMap = {\n  any: asValue,\n  color: asColor,\n  url: guess(_dataTypes.url),\n  image: guess(_dataTypes.image),\n  length: guess(_dataTypes.length),\n  percentage: guess(_dataTypes.percentage),\n  position: guess(_dataTypes.position),\n  lookup: asLookupValue,\n  'generic-name': guess(_dataTypes.genericName),\n  'family-name': guess(_dataTypes.familyName),\n  number: guess(_dataTypes.number),\n  'line-width': guess(_dataTypes.lineWidth),\n  'absolute-size': guess(_dataTypes.absoluteSize),\n  'relative-size': guess(_dataTypes.relativeSize),\n  shadow: guess(_dataTypes.shadow)\n};\nvar supportedTypes = Object.keys(typeMap);\n\nfunction splitAtFirst(input, delim) {\n  var idx = input.indexOf(delim);\n  if (idx === -1) return [undefined, input];\n  return [input.slice(0, idx), input.slice(idx + 1)];\n}\n\nfunction coerceValue(types, modifier, options, tailwindConfig) {\n  if (isArbitraryValue(modifier)) {\n    var arbitraryValue = modifier.slice(1, -1);\n\n    var _splitAtFirst = splitAtFirst(arbitraryValue, ':'),\n        _splitAtFirst2 = _slicedToArray(_splitAtFirst, 2),\n        explicitType = _splitAtFirst2[0],\n        value = _splitAtFirst2[1]; // It could be that this resolves to `url(https` which is not a valid\n    // identifier. We currently only support \"simple\" words with dashes or\n    // underscores. E.g.: family-name\n\n\n    if (!/^[\\w-_]+$/g.test(explicitType)) {\n      value = arbitraryValue;\n    } else if (explicitType !== undefined && !supportedTypes.includes(explicitType)) {\n      return [];\n    }\n\n    if (value.length > 0 && supportedTypes.includes(explicitType)) {\n      return [asValue(\"[\".concat(value, \"]\"), options), explicitType];\n    }\n  } // Find first matching type\n\n\n  var _iterator = _createForOfIteratorHelper([].concat(types)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var type = _step.value;\n      var result = typeMap[type](modifier, options, {\n        tailwindConfig: tailwindConfig\n      });\n      if (result !== undefined) return [result, type];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return [];\n}","map":null,"metadata":{},"sourceType":"script"}