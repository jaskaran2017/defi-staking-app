{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar fsScandir = require(\"@nodelib/fs.scandir\");\n\nvar fastq = require(\"fastq\");\n\nvar common = require(\"./common\");\n\nvar reader_1 = require(\"./reader\");\n\nvar AsyncReader = /*#__PURE__*/function (_reader_1$default) {\n  _inherits(AsyncReader, _reader_1$default);\n\n  function AsyncReader(_root, _settings) {\n    var _this;\n\n    _classCallCheck(this, AsyncReader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AsyncReader).call(this, _root, _settings));\n    _this._settings = _settings;\n    _this._scandir = fsScandir.scandir;\n    _this._emitter = new events_1.EventEmitter();\n    _this._queue = fastq(_this._worker.bind(_assertThisInitialized(_assertThisInitialized(_this))), _this._settings.concurrency);\n    _this._isFatalError = false;\n    _this._isDestroyed = false;\n\n    _this._queue.drain = function () {\n      if (!_this._isFatalError) {\n        _this._emitter.emit('end');\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AsyncReader, [{\n    key: \"read\",\n    value: function read() {\n      var _this2 = this;\n\n      this._isFatalError = false;\n      this._isDestroyed = false;\n      setImmediate(function () {\n        _this2._pushToQueue(_this2._root, _this2._settings.basePath);\n      });\n      return this._emitter;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._isDestroyed) {\n        throw new Error('The reader is already destroyed');\n      }\n\n      this._isDestroyed = true;\n\n      this._queue.killAndDrain();\n    }\n  }, {\n    key: \"onEntry\",\n    value: function onEntry(callback) {\n      this._emitter.on('entry', callback);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(callback) {\n      this._emitter.once('error', callback);\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(callback) {\n      this._emitter.once('end', callback);\n    }\n  }, {\n    key: \"_pushToQueue\",\n    value: function _pushToQueue(directory, base) {\n      var _this3 = this;\n\n      var queueItem = {\n        directory: directory,\n        base: base\n      };\n\n      this._queue.push(queueItem, function (error) {\n        if (error !== null) {\n          _this3._handleError(error);\n        }\n      });\n    }\n  }, {\n    key: \"_worker\",\n    value: function _worker(item, done) {\n      var _this4 = this;\n\n      this._scandir(item.directory, this._settings.fsScandirSettings, function (error, entries) {\n        if (error !== null) {\n          done(error, undefined);\n          return;\n        }\n\n        var _iterator = _createForOfIteratorHelper(entries),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var entry = _step.value;\n\n            _this4._handleEntry(entry, item.base);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        done(null, undefined);\n      });\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(error) {\n      if (this._isDestroyed || !common.isFatalError(this._settings, error)) {\n        return;\n      }\n\n      this._isFatalError = true;\n      this._isDestroyed = true;\n\n      this._emitter.emit('error', error);\n    }\n  }, {\n    key: \"_handleEntry\",\n    value: function _handleEntry(entry, base) {\n      if (this._isDestroyed || this._isFatalError) {\n        return;\n      }\n\n      var fullpath = entry.path;\n\n      if (base !== undefined) {\n        entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n      }\n\n      if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n        this._emitEntry(entry);\n      }\n\n      if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n        this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n      }\n    }\n  }, {\n    key: \"_emitEntry\",\n    value: function _emitEntry(entry) {\n      this._emitter.emit('entry', entry);\n    }\n  }, {\n    key: \"isDestroyed\",\n    get: function get() {\n      return this._isDestroyed;\n    }\n  }]);\n\n  return AsyncReader;\n}(reader_1.default);\n\nexports.default = AsyncReader;","map":null,"metadata":{},"sourceType":"script"}