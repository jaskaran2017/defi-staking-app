{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\n\nvar fsStat = require(\"@nodelib/fs.stat\");\n\nvar rpl = require(\"run-parallel\");\n\nvar constants_1 = require(\"../constants\");\n\nvar utils = require(\"../utils\");\n\nvar common = require(\"./common\");\n\nfunction read(directory, settings, callback) {\n  if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n    readdirWithFileTypes(directory, settings, callback);\n    return;\n  }\n\n  readdir(directory, settings, callback);\n}\n\nexports.read = read;\n\nfunction readdirWithFileTypes(directory, settings, callback) {\n  settings.fs.readdir(directory, {\n    withFileTypes: true\n  }, function (readdirError, dirents) {\n    if (readdirError !== null) {\n      callFailureCallback(callback, readdirError);\n      return;\n    }\n\n    var entries = dirents.map(function (dirent) {\n      return {\n        dirent: dirent,\n        name: dirent.name,\n        path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n      };\n    });\n\n    if (!settings.followSymbolicLinks) {\n      callSuccessCallback(callback, entries);\n      return;\n    }\n\n    var tasks = entries.map(function (entry) {\n      return makeRplTaskEntry(entry, settings);\n    });\n    rpl(tasks, function (rplError, rplEntries) {\n      if (rplError !== null) {\n        callFailureCallback(callback, rplError);\n        return;\n      }\n\n      callSuccessCallback(callback, rplEntries);\n    });\n  });\n}\n\nexports.readdirWithFileTypes = readdirWithFileTypes;\n\nfunction makeRplTaskEntry(entry, settings) {\n  return function (done) {\n    if (!entry.dirent.isSymbolicLink()) {\n      done(null, entry);\n      return;\n    }\n\n    settings.fs.stat(entry.path, function (statError, stats) {\n      if (statError !== null) {\n        if (settings.throwErrorOnBrokenSymbolicLink) {\n          done(statError);\n          return;\n        }\n\n        done(null, entry);\n        return;\n      }\n\n      entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n      done(null, entry);\n    });\n  };\n}\n\nfunction readdir(directory, settings, callback) {\n  settings.fs.readdir(directory, function (readdirError, names) {\n    if (readdirError !== null) {\n      callFailureCallback(callback, readdirError);\n      return;\n    }\n\n    var tasks = names.map(function (name) {\n      var path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n      return function (done) {\n        fsStat.stat(path, settings.fsStatSettings, function (error, stats) {\n          if (error !== null) {\n            done(error);\n            return;\n          }\n\n          var entry = {\n            name: name,\n            path: path,\n            dirent: utils.fs.createDirentFromStats(name, stats)\n          };\n\n          if (settings.stats) {\n            entry.stats = stats;\n          }\n\n          done(null, entry);\n        });\n      };\n    });\n    rpl(tasks, function (rplError, entries) {\n      if (rplError !== null) {\n        callFailureCallback(callback, rplError);\n        return;\n      }\n\n      callSuccessCallback(callback, entries);\n    });\n  });\n}\n\nexports.readdir = readdir;\n\nfunction callFailureCallback(callback, error) {\n  callback(error);\n}\n\nfunction callSuccessCallback(callback, result) {\n  callback(null, result);\n}","map":null,"metadata":{},"sourceType":"script"}