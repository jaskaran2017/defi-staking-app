{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _objectSpread = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withAlphaValue = withAlphaValue;\nexports.default = withAlphaVariable;\n\nvar _color = require(\"./color\");\n\nfunction withAlphaValue(color, alphaValue, defaultValue) {\n  if (typeof color === 'function') {\n    return color({\n      opacityValue: alphaValue\n    });\n  }\n\n  var parsed = (0, _color).parseColor(color);\n\n  if (parsed === null) {\n    return defaultValue;\n  }\n\n  return (0, _color).formatColor(_objectSpread({}, parsed, {\n    alpha: alphaValue\n  }));\n}\n\nfunction withAlphaVariable(_ref) {\n  var color = _ref.color,\n      property = _ref.property,\n      variable = _ref.variable;\n  var properties = [].concat(property);\n\n  if (typeof color === 'function') {\n    return _objectSpread(_defineProperty({}, variable, '1'), Object.fromEntries(properties.map(function (p) {\n      return [p, color({\n        opacityVariable: variable,\n        opacityValue: \"var(\".concat(variable, \")\")\n      })];\n    })));\n  }\n\n  var parsed = (0, _color).parseColor(color);\n\n  if (parsed === null) {\n    return Object.fromEntries(properties.map(function (p) {\n      return [p, color];\n    }));\n  }\n\n  if (parsed.alpha !== undefined) {\n    // Has an alpha value, return color as-is\n    return Object.fromEntries(properties.map(function (p) {\n      return [p, color];\n    }));\n  }\n\n  return _objectSpread(_defineProperty({}, variable, '1'), Object.fromEntries(properties.map(function (p) {\n    return [p, (0, _color).formatColor(_objectSpread({}, parsed, {\n      alpha: \"var(\".concat(variable, \")\")\n    }))];\n  })));\n}","map":null,"metadata":{},"sourceType":"script"}