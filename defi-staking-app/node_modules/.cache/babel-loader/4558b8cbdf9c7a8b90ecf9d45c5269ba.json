{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = expandTailwindAtRules;\n\nvar _quickLru = _interopRequireDefault(require(\"quick-lru\"));\n\nvar sharedState = _interopRequireWildcard(require(\"./sharedState\"));\n\nvar _generateRules = require(\"./generateRules\");\n\nvar _bigSign = _interopRequireDefault(require(\"../util/bigSign\"));\n\nvar _log = _interopRequireDefault(require(\"../util/log\"));\n\nvar _cloneNodes = _interopRequireDefault(require(\"../util/cloneNodes\"));\n\nvar _defaultExtractor = require(\"./defaultExtractor\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nvar env = sharedState.env;\nvar builtInExtractors = {\n  DEFAULT: _defaultExtractor.defaultExtractor\n};\nvar builtInTransformers = {\n  DEFAULT: function DEFAULT(content) {\n    return content;\n  },\n  svelte: function svelte(content) {\n    return content.replace(/(?:^|\\s)class:/g, ' ');\n  }\n};\n\nfunction getExtractor(tailwindConfig, fileExtension) {\n  var extractors = tailwindConfig.content.extract;\n  return extractors[fileExtension] || extractors.DEFAULT || builtInExtractors[fileExtension] || builtInExtractors.DEFAULT;\n}\n\nfunction getTransformer(tailwindConfig, fileExtension) {\n  var transformers = tailwindConfig.content.transform;\n  return transformers[fileExtension] || transformers.DEFAULT || builtInTransformers[fileExtension] || builtInTransformers.DEFAULT;\n}\n\nvar extractorCache = new WeakMap(); // Scans template contents for possible classes. This is a hot path on initial build but\n// not too important for subsequent builds. The faster the better though â€” if we can speed\n// up these regexes by 50% that could cut initial build time by like 20%.\n\nfunction getClassCandidates(content, extractor, candidates, seen) {\n  if (!extractorCache.has(extractor)) {\n    extractorCache.set(extractor, new _quickLru.default({\n      maxSize: 25000\n    }));\n  }\n\n  var _iterator = _createForOfIteratorHelper(content.split('\\n')),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var line = _step.value;\n      line = line.trim();\n\n      if (seen.has(line)) {\n        continue;\n      }\n\n      seen.add(line);\n\n      if (extractorCache.get(extractor).has(line)) {\n        var _iterator2 = _createForOfIteratorHelper(extractorCache.get(extractor).get(line)),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var match = _step2.value;\n            candidates.add(match);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } else {\n        var extractorMatches = extractor(line).filter(function (s) {\n          return s !== '!*';\n        });\n        var lineMatchesSet = new Set(extractorMatches);\n\n        var _iterator3 = _createForOfIteratorHelper(lineMatchesSet),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _match = _step3.value;\n            candidates.add(_match);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        extractorCache.get(extractor).set(line, lineMatchesSet);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction buildStylesheet(rules, context) {\n  var sortedRules = rules.sort(function (_ref, _ref2) {\n    var _ref3 = _slicedToArray(_ref, 1),\n        a = _ref3[0];\n\n    var _ref4 = _slicedToArray(_ref2, 1),\n        z = _ref4[0];\n\n    return (0, _bigSign).default(a - z);\n  });\n  var returnValue = {\n    base: new Set(),\n    defaults: new Set(),\n    components: new Set(),\n    utilities: new Set(),\n    variants: new Set(),\n    // All the CSS that is not Tailwind related can be put in this bucket. This\n    // will make it easier to later use this information when we want to\n    // `@apply` for example. The main reason we do this here is because we\n    // still need to make sure the order is correct. Last but not least, we\n    // will make sure to always re-inject this section into the css, even if\n    // certain rules were not used. This means that it will look like a no-op\n    // from the user's perspective, but we gathered all the useful information\n    // we need.\n    user: new Set()\n  };\n\n  var _iterator4 = _createForOfIteratorHelper(sortedRules),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n          sort = _step4$value[0],\n          rule = _step4$value[1];\n\n      if (sort >= context.minimumScreen) {\n        returnValue.variants.add(rule);\n        continue;\n      }\n\n      if (sort & context.layerOrder.base) {\n        returnValue.base.add(rule);\n        continue;\n      }\n\n      if (sort & context.layerOrder.defaults) {\n        returnValue.defaults.add(rule);\n        continue;\n      }\n\n      if (sort & context.layerOrder.components) {\n        returnValue.components.add(rule);\n        continue;\n      }\n\n      if (sort & context.layerOrder.utilities) {\n        returnValue.utilities.add(rule);\n        continue;\n      }\n\n      if (sort & context.layerOrder.user) {\n        returnValue.user.add(rule);\n        continue;\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return returnValue;\n}\n\nfunction expandTailwindAtRules(context) {\n  return function (root) {\n    var layerNodes = {\n      base: null,\n      components: null,\n      utilities: null,\n      variants: null\n    };\n    root.walkAtRules(function (rule) {\n      // Make sure this file contains Tailwind directives. If not, we can save\n      // a lot of work and bail early. Also we don't have to register our touch\n      // file as a dependency since the output of this CSS does not depend on\n      // the source of any templates. Think Vue <style> blocks for example.\n      if (rule.name === 'tailwind') {\n        if (Object.keys(layerNodes).includes(rule.params)) {\n          layerNodes[rule.params] = rule;\n        }\n      }\n    });\n\n    if (Object.values(layerNodes).every(function (n) {\n      return n === null;\n    })) {\n      return root;\n    } // ---\n    // Find potential rules in changed files\n\n\n    var candidates = new Set([sharedState.NOT_ON_DEMAND]);\n    var seen = new Set();\n    env.DEBUG && console.time('Reading changed files');\n\n    var _iterator5 = _createForOfIteratorHelper(context.changedContent),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _step5.value,\n            content = _step5$value.content,\n            extension = _step5$value.extension;\n        var transformer = getTransformer(context.tailwindConfig, extension);\n        var extractor = getExtractor(context.tailwindConfig, extension);\n        getClassCandidates(transformer(content), extractor, candidates, seen);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    env.DEBUG && console.timeEnd('Reading changed files'); // ---\n    // Generate the actual CSS\n\n    var classCacheCount = context.classCache.size;\n    env.DEBUG && console.time('Generate rules');\n    var rules = (0, _generateRules).generateRules(candidates, context);\n    env.DEBUG && console.timeEnd('Generate rules'); // We only ever add to the classCache, so if it didn't grow, there is nothing new.\n\n    env.DEBUG && console.time('Build stylesheet');\n\n    if (context.stylesheetCache === null || context.classCache.size !== classCacheCount) {\n      var _iterator6 = _createForOfIteratorHelper(rules),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var rule = _step6.value;\n          context.ruleCache.add(rule);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      context.stylesheetCache = buildStylesheet(_toConsumableArray(context.ruleCache), context);\n    }\n\n    env.DEBUG && console.timeEnd('Build stylesheet');\n    var _context$stylesheetCa = context.stylesheetCache,\n        defaultNodes = _context$stylesheetCa.defaults,\n        baseNodes = _context$stylesheetCa.base,\n        componentNodes = _context$stylesheetCa.components,\n        utilityNodes = _context$stylesheetCa.utilities,\n        screenNodes = _context$stylesheetCa.variants; // ---\n    // Replace any Tailwind directives with generated CSS\n\n    if (layerNodes.base) {\n      layerNodes.base.before((0, _cloneNodes).default([].concat(_toConsumableArray(baseNodes), _toConsumableArray(defaultNodes)), layerNodes.base.source));\n      layerNodes.base.remove();\n    }\n\n    if (layerNodes.components) {\n      layerNodes.components.before((0, _cloneNodes).default(_toConsumableArray(componentNodes), layerNodes.components.source));\n      layerNodes.components.remove();\n    }\n\n    if (layerNodes.utilities) {\n      layerNodes.utilities.before((0, _cloneNodes).default(_toConsumableArray(utilityNodes), layerNodes.utilities.source));\n      layerNodes.utilities.remove();\n    } // We do post-filtering to not alter the emitted order of the variants\n\n\n    var variantNodes = Array.from(screenNodes).filter(function (node) {\n      var ref;\n      var parentLayer = (ref = node.raws.tailwind) === null || ref === void 0 ? void 0 : ref.parentLayer;\n\n      if (parentLayer === 'components') {\n        return layerNodes.components !== null;\n      }\n\n      if (parentLayer === 'utilities') {\n        return layerNodes.utilities !== null;\n      }\n\n      return true;\n    });\n\n    if (layerNodes.variants) {\n      layerNodes.variants.before((0, _cloneNodes).default(variantNodes, layerNodes.variants.source));\n      layerNodes.variants.remove();\n    } else if (variantNodes.length > 0) {\n      root.append((0, _cloneNodes).default(variantNodes, root.source));\n    } // If we've got a utility layer and no utilities are generated there's likely something wrong\n\n\n    var hasUtilityVariants = variantNodes.some(function (node) {\n      var ref;\n      return ((ref = node.raws.tailwind) === null || ref === void 0 ? void 0 : ref.parentLayer) === 'utilities';\n    });\n\n    if (layerNodes.utilities && utilityNodes.size === 0 && !hasUtilityVariants) {\n      _log.default.warn('content-problems', ['No utility classes were detected in your source files. If this is unexpected, double-check the `content` option in your Tailwind CSS configuration.', 'https://tailwindcss.com/docs/content-configuration']);\n    } // ---\n\n\n    if (env.DEBUG) {\n      console.log('Potential classes: ', candidates.size);\n      console.log('Active contexts: ', sharedState.contextSourcesMap.size);\n    } // Clear the cache for the changed files\n\n\n    context.changedContent = []; // Cleanup any leftover @layer atrules\n\n    root.walkAtRules('layer', function (rule) {\n      if (Object.keys(layerNodes).includes(rule.params)) {\n        rule.remove();\n      }\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"script"}