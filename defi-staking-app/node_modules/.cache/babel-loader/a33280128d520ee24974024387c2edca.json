{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"./sub-components/Navbar\";\nimport Web3 from \"web3\";\nimport Tether from \"../truffle.abis/Tether.json\"; // import { loadavg } from \"os\";\n\nvar App = function App() {\n  var _useState = useState(\"0x0\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState({\n    provider: null,\n    web3: null\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      web3Api = _useState4[0],\n      setWeb3Api = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      networkId = _useState6[0],\n      setNetworkId = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tether = _useState8[0],\n      setTether = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      rwd = _useState10[0],\n      setRwd = _useState10[1];\n\n  var _useState11 = useState({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      decentralBank = _useState12[0],\n      setDecentralBank = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      stakingBalance = _useState14[0],\n      setStakingBalance = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      tetherBalance = _useState16[0],\n      setTetherBalance = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      rwdBalance = _useState18[0],\n      setRwdBalance = _useState18[1];\n\n  var _useState19 = useState(true),\n      _useState20 = _slicedToArray(_useState19, 2),\n      loading = _useState20[0],\n      setLoading = _useState20[1];\n\n  useEffect(function () {\n    //This loadProvider method will detect metaMask and if present will connect the app to it.\n    // Otherwise it will raise an alert/warning to the user to download metaMask.\n    var loadProvider = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                provider = null; // if (window.ethereum) {\n                //   provider = window.ethereum;\n                //   try {\n                //     await provider.enable();\n                //   } catch (error) {\n                //     console.log(\"User Not Allowed.\");\n                //   }\n                // } else if (window.web3) {\n                //   provider = await window.web3.currentProvider;\n                // } else if (!process.env.production) {\n                //   provider = await new Web3.providers.HttpProvider(\n                //     \"http://localhost:7545\"\n                //   );\n                // } else {\n                //   window.alert(\"Download MetaMask to run this application!\");\n                // }\n\n                setWeb3Api({\n                  web3: new Web3(provider),\n                  provider: provider\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function loadProvider() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    loadProvider();\n  }, []);\n  useEffect(function () {\n    // getting the current account and networkId\n    var currentAccount = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var accounts, networkId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return web3Api.web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context2.sent;\n                setAccount(accounts[0]);\n                _context2.next = 6;\n                return web3Api.web3.eth.net.getId();\n\n              case 6:\n                networkId = _context2.sent;\n                setNetworkId(networkId);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function currentAccount() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    web3Api.web3 && currentAccount();\n  }, [web3Api.web3]);\n  console.log(networkId, \"netId\"); // console.log(currentAccount);\n\n  useEffect(function () {\n    // loading contract data from blockChain\n    var loadContract = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var tetherData, _tether, _tetherBalance;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 12;\n                  break;\n                }\n\n                _context3.next = 4;\n                return new web3Api.web3.eth.Contract(Tether.abi, tetherData.address);\n\n              case 4:\n                _tether = _context3.sent;\n                setTether({\n                  tether: _tether\n                });\n                _context3.next = 8;\n                return _tether.methods.balanceOf(account).call();\n\n              case 8:\n                _tetherBalance = _context3.sent;\n                setTetherBalance({\n                  tetherBalance: _tetherBalance.toString()\n                });\n                _context3.next = 13;\n                break;\n\n              case 12:\n                window.alert(\"Error! no network detected. Contract not deployed.\");\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function loadContract() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    web3Api.web3 && loadContract(); // console.log({ tether });\n    // console.log( tetherData.address);\n    // console.log({ balance: tetherBalance });\n  }, [web3Api.web3]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    account: account,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","useState","useEffect","Navbar","Web3","Tether","App","account","setAccount","provider","web3","web3Api","setWeb3Api","networkId","setNetworkId","tether","setTether","rwd","setRwd","decentralBank","setDecentralBank","stakingBalance","setStakingBalance","tetherBalance","setTetherBalance","rwdBalance","setRwdBalance","loading","setLoading","loadProvider","currentAccount","eth","getAccounts","accounts","net","getId","console","log","loadContract","tetherData","networks","Contract","abi","address","methods","balanceOf","call","toString","window","alert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./sub-components/Navbar\";\nimport Web3 from \"web3\";\nimport Tether from \"../truffle.abis/Tether.json\";\n\n// import { loadavg } from \"os\";\n\nconst App = () => {\n  const [account, setAccount] = useState(\"0x0\");\n  const [web3Api, setWeb3Api] = useState({\n    provider: null,\n    web3: null,\n  });\n  const [networkId, setNetworkId] = useState(null);\n  const [tether, setTether] = useState({});\n  const [rwd, setRwd] = useState({});\n  const [decentralBank, setDecentralBank] = useState({});\n  const [stakingBalance, setStakingBalance] = useState(0);\n  const [tetherBalance, setTetherBalance] = useState(0);\n  const [rwdBalance, setRwdBalance] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    //This loadProvider method will detect metaMask and if present will connect the app to it.\n    // Otherwise it will raise an alert/warning to the user to download metaMask.\n    const loadProvider = async () => {\n      let provider = null;\n      // if (window.ethereum) {\n      //   provider = window.ethereum;\n      //   try {\n      //     await provider.enable();\n      //   } catch (error) {\n      //     console.log(\"User Not Allowed.\");\n      //   }\n      // } else if (window.web3) {\n      //   provider = await window.web3.currentProvider;\n      // } else if (!process.env.production) {\n      //   provider = await new Web3.providers.HttpProvider(\n      //     \"http://localhost:7545\"\n      //   );\n      // } else {\n      //   window.alert(\"Download MetaMask to run this application!\");\n      // }\n      setWeb3Api({\n        web3: new Web3(provider),\n        provider,\n      });\n    };\n    loadProvider();\n  }, []);\n\n  useEffect(() => {\n    // getting the current account and networkId\n    const currentAccount = async () => {\n      const accounts = await web3Api.web3.eth.getAccounts();\n      setAccount(accounts[0]);\n      const networkId = await web3Api.web3.eth.net.getId();\n      setNetworkId(networkId);\n    };\n\n    web3Api.web3 && currentAccount();\n  }, [web3Api.web3]);\n  console.log(networkId, \"netId\");\n  // console.log(currentAccount);\n\n  useEffect(() => {\n    // loading contract data from blockChain\n    const loadContract = async () => {\n      const tetherData = Tether.networks[networkId];\n      if (tetherData) {\n        const tether = await new web3Api.web3.eth.Contract(\n          Tether.abi,\n          tetherData.address\n        );\n        setTether({ tether: tether });\n        let tetherBalance = await tether.methods.balanceOf(account).call();\n        setTetherBalance({ tetherBalance: tetherBalance.toString() });\n      } else {\n        window.alert(`Error! no network detected. Contract not deployed.`);\n      }\n    };\n    web3Api.web3 && loadContract();\n    // console.log({ tether });\n    // console.log( tetherData.address);\n    // console.log({ balance: tetherBalance });\n  }, [web3Api.web3]);\n\n  return (\n    <>\n      <Navbar account={account} />\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}