{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _dlv = _interopRequireDefault(require(\"dlv\"));\n\nvar _didyoumean = _interopRequireDefault(require(\"didyoumean\"));\n\nvar _transformThemeValue = _interopRequireDefault(require(\"../util/transformThemeValue\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _normalizeScreens = require(\"../util/normalizeScreens\");\n\nvar _buildMediaQuery = _interopRequireDefault(require(\"../util/buildMediaQuery\"));\n\nvar _toPath = require(\"../util/toPath\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isObject(input) {\n  return typeof input === 'object' && input !== null;\n}\n\nfunction findClosestExistingPath(theme, path) {\n  var parts = (0, _toPath).toPath(path);\n\n  do {\n    parts.pop();\n    if ((0, _dlv).default(theme, parts) !== undefined) break;\n  } while (parts.length);\n\n  return parts.length ? parts : undefined;\n}\n\nfunction pathToString(path) {\n  if (typeof path === 'string') return path;\n  return path.reduce(function (acc, cur, i) {\n    if (cur.includes('.')) return \"\".concat(acc, \"[\").concat(cur, \"]\");\n    return i === 0 ? cur : \"\".concat(acc, \".\").concat(cur);\n  }, '');\n}\n\nfunction list(items) {\n  return items.map(function (key) {\n    return \"'\".concat(key, \"'\");\n  }).join(', ');\n}\n\nfunction listKeys(obj) {\n  return list(Object.keys(obj));\n}\n\nfunction validatePath(config, path, defaultValue) {\n  var pathString = Array.isArray(path) ? pathToString(path) : path.replace(/^['\"]+/g, '').replace(/['\"]+$/g, '');\n  var pathSegments = Array.isArray(path) ? path : (0, _toPath).toPath(pathString);\n  var value = (0, _dlv).default(config.theme, pathSegments, defaultValue);\n\n  if (value === undefined) {\n    var error = \"'\".concat(pathString, \"' does not exist in your theme config.\");\n    var parentSegments = pathSegments.slice(0, -1);\n    var parentValue = (0, _dlv).default(config.theme, parentSegments);\n\n    if (isObject(parentValue)) {\n      var validKeys = Object.keys(parentValue).filter(function (key) {\n        return validatePath(config, [].concat(_toConsumableArray(parentSegments), [key])).isValid;\n      });\n      var suggestion = (0, _didyoumean).default(pathSegments[pathSegments.length - 1], validKeys);\n\n      if (suggestion) {\n        error += \" Did you mean '\".concat(pathToString([].concat(_toConsumableArray(parentSegments), [suggestion])), \"'?\");\n      } else if (validKeys.length > 0) {\n        error += \" '\".concat(pathToString(parentSegments), \"' has the following valid keys: \").concat(list(validKeys));\n      }\n    } else {\n      var closestPath = findClosestExistingPath(config.theme, pathString);\n\n      if (closestPath) {\n        var closestValue = (0, _dlv).default(config.theme, closestPath);\n\n        if (isObject(closestValue)) {\n          error += \" '\".concat(pathToString(closestPath), \"' has the following keys: \").concat(listKeys(closestValue));\n        } else {\n          error += \" '\".concat(pathToString(closestPath), \"' is not an object.\");\n        }\n      } else {\n        error += \" Your theme has the following top-level keys: \".concat(listKeys(config.theme));\n      }\n    }\n\n    return {\n      isValid: false,\n      error: error\n    };\n  }\n\n  if (!(typeof value === 'string' || typeof value === 'number' || typeof value === 'function' || value instanceof String || value instanceof Number || Array.isArray(value))) {\n    var _error = \"'\".concat(pathString, \"' was found but does not resolve to a string.\");\n\n    if (isObject(value)) {\n      var _validKeys = Object.keys(value).filter(function (key) {\n        return validatePath(config, [].concat(_toConsumableArray(pathSegments), [key])).isValid;\n      });\n\n      if (_validKeys.length) {\n        _error += \" Did you mean something like '\".concat(pathToString([].concat(_toConsumableArray(pathSegments), [_validKeys[0]])), \"'?\");\n      }\n    }\n\n    return {\n      isValid: false,\n      error: _error\n    };\n  }\n\n  var _pathSegments = _slicedToArray(pathSegments, 1),\n      themeSection = _pathSegments[0];\n\n  return {\n    isValid: true,\n    value: (0, _transformThemeValue).default(themeSection)(value)\n  };\n}\n\nfunction extractArgs(node, vNodes, functions) {\n  vNodes = vNodes.map(function (vNode) {\n    return resolveVNode(node, vNode, functions);\n  });\n  var args = [''];\n\n  var _iterator = _createForOfIteratorHelper(vNodes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var vNode1 = _step.value;\n\n      if (vNode1.type === 'div' && vNode1.value === ',') {\n        args.push('');\n      } else {\n        args[args.length - 1] += _postcssValueParser.default.stringify(vNode1);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return args;\n}\n\nfunction resolveVNode(node, vNode, functions) {\n  if (vNode.type === 'function' && functions[vNode.value] !== undefined) {\n    var args = extractArgs(node, vNode.nodes, functions);\n    vNode.type = 'word';\n    vNode.value = functions[vNode.value].apply(functions, [node].concat(_toConsumableArray(args)));\n  }\n\n  return vNode;\n}\n\nfunction resolveFunctions(node, input, functions) {\n  return (0, _postcssValueParser).default(input).walk(function (vNode) {\n    resolveVNode(node, vNode, functions);\n  }).toString();\n}\n\nvar nodeTypePropertyMap = {\n  atrule: 'params',\n  decl: 'value'\n};\n\nfunction _default(_ref) {\n  var config = _ref.tailwindConfig;\n  var functions = {\n    theme: function theme(node, path) {\n      for (var _len = arguments.length, defaultValue = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        defaultValue[_key - 2] = arguments[_key];\n      }\n\n      var _validatePath = validatePath(config, path, defaultValue.length ? defaultValue : undefined),\n          isValid = _validatePath.isValid,\n          value = _validatePath.value,\n          error = _validatePath.error;\n\n      if (!isValid) {\n        throw node.error(error);\n      }\n\n      return value;\n    },\n    screen: function screen(node, _screen) {\n      _screen = _screen.replace(/^['\"]+/g, '').replace(/['\"]+$/g, '');\n      var screens = (0, _normalizeScreens).normalizeScreens(config.theme.screens);\n      var screenDefinition = screens.find(function (_ref2) {\n        var name = _ref2.name;\n        return name === _screen;\n      });\n\n      if (!screenDefinition) {\n        throw node.error(\"The '\".concat(_screen, \"' screen does not exist in your theme.\"));\n      }\n\n      return (0, _buildMediaQuery).default(screenDefinition);\n    }\n  };\n  return function (root) {\n    root.walk(function (node) {\n      var property = nodeTypePropertyMap[node.type];\n\n      if (property === undefined) {\n        return;\n      }\n\n      node[property] = resolveFunctions(node, node[property], functions);\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"script"}