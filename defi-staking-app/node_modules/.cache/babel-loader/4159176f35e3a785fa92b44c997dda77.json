{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\n\nvar fsStat = require(\"@nodelib/fs.stat\");\n\nvar constants_1 = require(\"../constants\");\n\nvar utils = require(\"../utils\");\n\nvar common = require(\"./common\");\n\nfunction read(directory, settings) {\n  if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n    return readdirWithFileTypes(directory, settings);\n  }\n\n  return readdir(directory, settings);\n}\n\nexports.read = read;\n\nfunction readdirWithFileTypes(directory, settings) {\n  var dirents = settings.fs.readdirSync(directory, {\n    withFileTypes: true\n  });\n  return dirents.map(function (dirent) {\n    var entry = {\n      dirent: dirent,\n      name: dirent.name,\n      path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n    };\n\n    if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {\n      try {\n        var stats = settings.fs.statSync(entry.path);\n        entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n      } catch (error) {\n        if (settings.throwErrorOnBrokenSymbolicLink) {\n          throw error;\n        }\n      }\n    }\n\n    return entry;\n  });\n}\n\nexports.readdirWithFileTypes = readdirWithFileTypes;\n\nfunction readdir(directory, settings) {\n  var names = settings.fs.readdirSync(directory);\n  return names.map(function (name) {\n    var entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n    var stats = fsStat.statSync(entryPath, settings.fsStatSettings);\n    var entry = {\n      name: name,\n      path: entryPath,\n      dirent: utils.fs.createDirentFromStats(name, stats)\n    };\n\n    if (settings.stats) {\n      entry.stats = stats;\n    }\n\n    return entry;\n  });\n}\n\nexports.readdir = readdir;","map":null,"metadata":{},"sourceType":"script"}