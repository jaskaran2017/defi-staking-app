{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = require(\"../../utils\");\n\nvar partial_1 = require(\"../matchers/partial\");\n\nvar DeepFilter = /*#__PURE__*/function () {\n  function DeepFilter(_settings, _micromatchOptions) {\n    _classCallCheck(this, DeepFilter);\n\n    this._settings = _settings;\n    this._micromatchOptions = _micromatchOptions;\n  }\n\n  _createClass(DeepFilter, [{\n    key: \"getFilter\",\n    value: function getFilter(basePath, positive, negative) {\n      var _this = this;\n\n      var matcher = this._getMatcher(positive);\n\n      var negativeRe = this._getNegativePatternsRe(negative);\n\n      return function (entry) {\n        return _this._filter(basePath, entry, matcher, negativeRe);\n      };\n    }\n  }, {\n    key: \"_getMatcher\",\n    value: function _getMatcher(patterns) {\n      return new partial_1.default(patterns, this._settings, this._micromatchOptions);\n    }\n  }, {\n    key: \"_getNegativePatternsRe\",\n    value: function _getNegativePatternsRe(patterns) {\n      var affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);\n      return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);\n    }\n  }, {\n    key: \"_filter\",\n    value: function _filter(basePath, entry, matcher, negativeRe) {\n      if (this._isSkippedByDeep(basePath, entry.path)) {\n        return false;\n      }\n\n      if (this._isSkippedSymbolicLink(entry)) {\n        return false;\n      }\n\n      var filepath = utils.path.removeLeadingDotSegment(entry.path);\n\n      if (this._isSkippedByPositivePatterns(filepath, matcher)) {\n        return false;\n      }\n\n      return this._isSkippedByNegativePatterns(filepath, negativeRe);\n    }\n  }, {\n    key: \"_isSkippedByDeep\",\n    value: function _isSkippedByDeep(basePath, entryPath) {\n      /**\n       * Avoid unnecessary depth calculations when it doesn't matter.\n       */\n      if (this._settings.deep === Infinity) {\n        return false;\n      }\n\n      return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;\n    }\n  }, {\n    key: \"_getEntryLevel\",\n    value: function _getEntryLevel(basePath, entryPath) {\n      var entryPathDepth = entryPath.split('/').length;\n\n      if (basePath === '') {\n        return entryPathDepth;\n      }\n\n      var basePathDepth = basePath.split('/').length;\n      return entryPathDepth - basePathDepth;\n    }\n  }, {\n    key: \"_isSkippedSymbolicLink\",\n    value: function _isSkippedSymbolicLink(entry) {\n      return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();\n    }\n  }, {\n    key: \"_isSkippedByPositivePatterns\",\n    value: function _isSkippedByPositivePatterns(entryPath, matcher) {\n      return !this._settings.baseNameMatch && !matcher.match(entryPath);\n    }\n  }, {\n    key: \"_isSkippedByNegativePatterns\",\n    value: function _isSkippedByNegativePatterns(entryPath, patternsRe) {\n      return !utils.pattern.matchAny(entryPath, patternsRe);\n    }\n  }]);\n\n  return DeepFilter;\n}();\n\nexports.default = DeepFilter;","map":null,"metadata":{},"sourceType":"script"}