{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"./sub-components/Navbar\";\nimport Web3 from \"web3\"; // import { loadavg } from \"os\";\n\nvar App = function App() {\n  var _useState = useState(\"0x0\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState({\n    provider: null,\n    web3: null\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      web3Api = _useState4[0],\n      setWeb3Api = _useState4[1];\n\n  useEffect(function () {\n    //This loadProvider method will detect metaMask and if present will connect the app to it.\n    // Otherwise it will raise an alert/warning to the user to download metaMask.\n    var loadProvider = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                provider = null;\n\n                if (!window.ethereum) {\n                  _context.next = 15;\n                  break;\n                }\n\n                provider = window.ethereum;\n                _context.prev = 3;\n                _context.next = 6;\n                return provider.enable();\n\n              case 6:\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](3);\n                console.log(\"User Not Allowed\");\n\n              case 11:\n                _context.next = 13;\n                return window.ethereum.enable();\n\n              case 13:\n                _context.next = 22;\n                break;\n\n              case 15:\n                if (!window.web3) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.next = 18;\n                return new Web3(window.web3.currentProvider);\n\n              case 18:\n                window.web3 = _context.sent;\n                _context.next = 22;\n                break;\n\n              case 21:\n                window.alert(\"Download MetaMask to run this application!\");\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 8]]);\n      }));\n\n      return function loadProvider() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var currentAccount = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, account;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context2.sent;\n                console.log(account);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function currentAccount() {\n        return _ref2.apply(this, arguments);\n      };\n    }(); // const loadProvider = async () => {\n    //   await console.log(window.web3);\n    //   await console.log(window.ethereum);\n    //   // console.log(\"Metamask not detected.\");\n    // };\n\n\n    loadProvider();\n    currentAccount();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    account: account,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","useState","useEffect","Navbar","Web3","App","account","setAccount","provider","web3","web3Api","setWeb3Api","loadProvider","window","ethereum","enable","console","log","currentProvider","alert","currentAccount","eth","getAccounts"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,kBACcJ,QAAQ,CAAC,KAAD,CADtB;AAAA;AAAA,MACTK,OADS;AAAA,MACAC,UADA;;AAAA,mBAEcN,QAAQ,CAAC;AACrCO,IAAAA,QAAQ,EAAC,IAD4B;AAErCC,IAAAA,IAAI,EAAC;AAFgC,GAAD,CAFtB;AAAA;AAAA,MAETC,OAFS;AAAA,MAEAC,UAFA;;AAOhBT,EAAAA,SAAS,CAAC,YAAM;AACd;AACA;AACA,QAAMU,YAAY;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACfJ,gBAAAA,QADe,GACJ,IADI;;AAAA,qBAEfK,MAAM,CAACC,QAFQ;AAAA;AAAA;AAAA;;AAGjBN,gBAAAA,QAAQ,GAAGK,MAAM,CAACC,QAAlB;AAHiB;AAAA;AAAA,uBAKTN,QAAQ,CAACO,MAAT,EALS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOfC,gBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AAPe;AAAA;AAAA,uBASXJ,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EATW;;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAURF,MAAM,CAACJ,IAVC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAWG,IAAIL,IAAJ,CAASS,MAAM,CAACJ,IAAP,CAAYS,eAArB,CAXH;;AAAA;AAWjBL,gBAAAA,MAAM,CAACJ,IAXU;AAAA;AAAA;;AAAA;AAajBI,gBAAAA,MAAM,CAACM,KAAP,CAAa,4CAAb;;AAbiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZP,YAAY;AAAA;AAAA;AAAA,OAAlB;;AAiBA,QAAMQ,cAAc;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACfX,gBAAAA,IADe,GACRI,MAAM,CAACJ,IADC;AAAA;AAAA,uBAECA,IAAI,CAACY,GAAL,CAASC,WAAT,EAFD;;AAAA;AAEfhB,gBAAAA,OAFe;AAGrBU,gBAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;;AAHqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAdc,cAAc;AAAA;AAAA;AAAA,OAApB,CApBc,CA2Bd;AACA;AACA;AAEA;AACA;;;AACAR,IAAAA,YAAY;AACZQ,IAAAA,cAAc;AACf,GAnCQ,EAmCN,EAnCM,CAAT;AAsCA,sBACE,uDACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEd,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAlDD;;AAoDA,eAAeD,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./sub-components/Navbar\";\nimport Web3 from \"web3\";\n\n// import { loadavg } from \"os\";\n\nconst App = () => {\n  const [account, setAccount] = useState(\"0x0\");\n  const [web3Api, setWeb3Api] = useState({\n    provider:null,\n    web3:null,\n  });\n\n  useEffect(() => {\n    //This loadProvider method will detect metaMask and if present will connect the app to it.\n    // Otherwise it will raise an alert/warning to the user to download metaMask.\n    const loadProvider = async () => {\n      let provider = null;\n      if (window.ethereum) {\n        provider = window.ethereum;\n        try {\n          await provider.enable();\n        } catch (error) {\n          console.log(\"User Not Allowed\")\n        }\n        await window.ethereum.enable();\n      } else if (window.web3) {\n        window.web3 = await new Web3(window.web3.currentProvider);\n      } else {\n        window.alert(\"Download MetaMask to run this application!\");\n      }\n    };\n  \n    const currentAccount = async () => {\n      const web3 = window.web3;\n      const account = await web3.eth.getAccounts();\n      console.log(account);\n    };\n    \n\n    // const loadProvider = async () => {\n    //   await console.log(window.web3);\n    //   await console.log(window.ethereum);\n\n    //   // console.log(\"Metamask not detected.\");\n    // };\n    loadProvider();\n    currentAccount();\n  }, []);\n\n\n  return (\n    <>\n      <Navbar account={account} />\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}