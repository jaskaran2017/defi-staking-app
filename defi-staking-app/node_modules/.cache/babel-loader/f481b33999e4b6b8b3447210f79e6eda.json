{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils = require(\"../../utils\");\n\nvar Matcher = /*#__PURE__*/function () {\n  function Matcher(_patterns, _settings, _micromatchOptions) {\n    _classCallCheck(this, Matcher);\n\n    this._patterns = _patterns;\n    this._settings = _settings;\n    this._micromatchOptions = _micromatchOptions;\n    this._storage = [];\n\n    this._fillStorage();\n  }\n\n  _createClass(Matcher, [{\n    key: \"_fillStorage\",\n    value: function _fillStorage() {\n      /**\n       * The original pattern may include `{,*,**,a/*}`, which will lead to problems with matching (unresolved level).\n       * So, before expand patterns with brace expansion into separated patterns.\n       */\n      var patterns = utils.pattern.expandPatternsWithBraceExpansion(this._patterns);\n\n      var _iterator = _createForOfIteratorHelper(patterns),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pattern = _step.value;\n\n          var segments = this._getPatternSegments(pattern);\n\n          var sections = this._splitSegmentsIntoSections(segments);\n\n          this._storage.push({\n            complete: sections.length <= 1,\n            pattern: pattern,\n            segments: segments,\n            sections: sections\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_getPatternSegments\",\n    value: function _getPatternSegments(pattern) {\n      var _this = this;\n\n      var parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);\n      return parts.map(function (part) {\n        var dynamic = utils.pattern.isDynamicPattern(part, _this._settings);\n\n        if (!dynamic) {\n          return {\n            dynamic: false,\n            pattern: part\n          };\n        }\n\n        return {\n          dynamic: true,\n          pattern: part,\n          patternRe: utils.pattern.makeRe(part, _this._micromatchOptions)\n        };\n      });\n    }\n  }, {\n    key: \"_splitSegmentsIntoSections\",\n    value: function _splitSegmentsIntoSections(segments) {\n      return utils.array.splitWhen(segments, function (segment) {\n        return segment.dynamic && utils.pattern.hasGlobStar(segment.pattern);\n      });\n    }\n  }]);\n\n  return Matcher;\n}();\n\nexports.default = Matcher;","map":null,"metadata":{},"sourceType":"script"}