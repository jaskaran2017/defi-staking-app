{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = collapseDuplicateDeclarations;\n\nfunction collapseDuplicateDeclarations() {\n  return function (root) {\n    root.walkRules(function (node) {\n      var seen = new Map();\n      var droppable = new Set([]);\n      var byProperty = new Map();\n      node.walkDecls(function (decl) {\n        // This could happen if we have nested selectors. In that case the\n        // parent will loop over all its declarations but also the declarations\n        // of nested rules. With this we ensure that we are shallowly checking\n        // declarations.\n        if (decl.parent !== node) {\n          return;\n        }\n\n        if (seen.has(decl.prop)) {\n          // Exact same value as what we have seen so far\n          if (seen.get(decl.prop).value === decl.value) {\n            // Keep the last one, drop the one we've seen so far\n            droppable.add(seen.get(decl.prop)); // Override the existing one with the new value. This is necessary\n            // so that if we happen to have more than one declaration with the\n            // same value, that we keep removing the previous one. Otherwise we\n            // will only remove the *first* one.\n\n            seen.set(decl.prop, decl);\n            return;\n          } // Not the same value, so we need to check if we can merge it so\n          // let's collect it first.\n\n\n          if (!byProperty.has(decl.prop)) {\n            byProperty.set(decl.prop, new Set());\n          }\n\n          byProperty.get(decl.prop).add(seen.get(decl.prop));\n          byProperty.get(decl.prop).add(decl);\n        }\n\n        seen.set(decl.prop, decl);\n      }); // Drop all the duplicate declarations with the exact same value we've\n      // already seen so far.\n\n      var _iterator = _createForOfIteratorHelper(droppable),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var decl1 = _step.value;\n          decl1.remove();\n        } // Analyze the declarations based on its unit, drop all the declarations\n        // with the same unit but the last one in the list.\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(byProperty.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var declarations = _step2.value;\n          var byUnit = new Map();\n\n          var _iterator3 = _createForOfIteratorHelper(declarations),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var decl = _step3.value;\n              var unit = resolveUnit(decl.value);\n\n              if (unit === null) {\n                continue;\n              }\n\n              if (!byUnit.has(unit)) {\n                byUnit.set(unit, new Set());\n              }\n\n              byUnit.get(unit).add(decl);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          var _iterator4 = _createForOfIteratorHelper(byUnit.values()),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var declarations1 = _step4.value;\n              // Get all but the last one\n              var removableDeclarations = Array.from(declarations1).slice(0, -1);\n\n              var _iterator5 = _createForOfIteratorHelper(removableDeclarations),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _decl = _step5.value;\n\n                  _decl.remove();\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    });\n  };\n}\n\nvar UNITLESS_NUMBER = Symbol('unitless-number');\n\nfunction resolveUnit(input) {\n  var result = /^-?\\d*.?\\d+([\\w%]+)?$/g.exec(input);\n\n  if (result) {\n    var ref;\n    return (ref = result[1]) !== null && ref !== void 0 ? ref : UNITLESS_NUMBER;\n  }\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"script"}