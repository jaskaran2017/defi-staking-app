{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeScreens = normalizeScreens;\n\nfunction normalizeScreens(screens) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (Array.isArray(screens)) {\n    return screens.map(function (screen) {\n      if (root && Array.isArray(screen)) {\n        throw new Error('The tuple syntax is not supported for `screens`.');\n      }\n\n      if (typeof screen === 'string') {\n        return {\n          name: screen.toString(),\n          values: [{\n            min: screen,\n            max: undefined\n          }]\n        };\n      }\n\n      var _screen = _slicedToArray(screen, 2),\n          name = _screen[0],\n          options = _screen[1];\n\n      name = name.toString();\n\n      if (typeof options === 'string') {\n        return {\n          name: name,\n          values: [{\n            min: options,\n            max: undefined\n          }]\n        };\n      }\n\n      if (Array.isArray(options)) {\n        return {\n          name: name,\n          values: options.map(function (option) {\n            return resolveValue(option);\n          })\n        };\n      }\n\n      return {\n        name: name,\n        values: [resolveValue(options)]\n      };\n    });\n  }\n\n  return normalizeScreens(Object.entries(screens !== null && screens !== void 0 ? screens : {}), false);\n}\n\nfunction resolveValue() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _minWidth = _ref['min-width'],\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? _minWidth : _ref$min,\n      max = _ref.max,\n      raw = _ref.raw;\n\n  return {\n    min: min,\n    max: max,\n    raw: raw\n  };\n}","map":null,"metadata":{},"sourceType":"script"}