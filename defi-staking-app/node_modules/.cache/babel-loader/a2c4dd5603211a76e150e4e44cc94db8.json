{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeConfig = normalizeConfig;\n\nvar _log = _interopRequireWildcard(require(\"./log\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction normalizeConfig(config) {\n  // Quick structure validation\n\n  /**\n  * type FilePath = string\n  * type RawFile = { raw: string, extension?: string }\n  * type ExtractorFn = (content: string) => Array<string>\n  * type TransformerFn = (content: string) => string\n  *\n  * type Content =\n  *   | Array<FilePath | RawFile>\n  *   | {\n  *       files: Array<FilePath | RawFile>,\n  *       extract?: ExtractorFn | { [extension: string]: ExtractorFn }\n  *       transform?: TransformerFn | { [extension: string]: TransformerFn }\n  *   }\n  */\n  var valid = function () {\n    // `config.purge` should not exist anymore\n    if (config.purge) {\n      return false;\n    } // `config.content` should exist\n\n\n    if (!config.content) {\n      return false;\n    } // `config.content` should be an object or an array\n\n\n    if (!Array.isArray(config.content) && !(typeof config.content === 'object' && config.content !== null)) {\n      return false;\n    } // When `config.content` is an array, it should consist of FilePaths or RawFiles\n\n\n    if (Array.isArray(config.content)) {\n      return config.content.every(function (path) {\n        // `path` can be a string\n        if (typeof path === 'string') return true; // `path` can be an object { raw: string, extension?: string }\n        // `raw` must be a string\n\n        if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== 'string') return false; // `extension` (if provided) should also be a string\n\n        if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== 'string') {\n          return false;\n        }\n\n        return true;\n      });\n    } // When `config.content` is an object\n\n\n    if (typeof config.content === 'object' && config.content !== null) {\n      // Only `files`, `extract` and `transform` can exist in `config.content`\n      if (Object.keys(config.content).some(function (key) {\n        return !['files', 'extract', 'transform'].includes(key);\n      })) {\n        return false;\n      } // `config.content.files` should exist of FilePaths or RawFiles\n\n\n      if (Array.isArray(config.content.files)) {\n        if (!config.content.files.every(function (path) {\n          // `path` can be a string\n          if (typeof path === 'string') return true; // `path` can be an object { raw: string, extension?: string }\n          // `raw` must be a string\n\n          if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== 'string') return false; // `extension` (if provided) should also be a string\n\n          if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== 'string') {\n            return false;\n          }\n\n          return true;\n        })) {\n          return false;\n        } // `config.content.extract` is optional, and can be a Function or a Record<String, Function>\n\n\n        if (typeof config.content.extract === 'object') {\n          for (var _i = 0, _Object$values = Object.values(config.content.extract); _i < _Object$values.length; _i++) {\n            var value = _Object$values[_i];\n\n            if (typeof value !== 'function') {\n              return false;\n            }\n          }\n        } else if (!(config.content.extract === undefined || typeof config.content.extract === 'function')) {\n          return false;\n        } // `config.content.transform` is optional, and can be a Function or a Record<String, Function>\n\n\n        if (typeof config.content.transform === 'object') {\n          for (var _i2 = 0, _Object$values2 = Object.values(config.content.transform); _i2 < _Object$values2.length; _i2++) {\n            var _value = _Object$values2[_i2];\n\n            if (typeof _value !== 'function') {\n              return false;\n            }\n          }\n        } else if (!(config.content.transform === undefined || typeof config.content.transform === 'function')) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }();\n\n  if (!valid) {\n    _log.default.warn('purge-deprecation', ['The `purge`/`content` options have changed in Tailwind CSS v3.0.', 'Update your configuration file to eliminate this warning.', 'https://tailwindcss.com/docs/upgrade-guide#configure-content-sources']);\n  } // Normalize the `safelist`\n\n\n  config.safelist = function () {\n    var ref;\n    var content = config.content,\n        purge = config.purge,\n        safelist = config.safelist;\n    if (Array.isArray(safelist)) return safelist;\n    if (Array.isArray(content === null || content === void 0 ? void 0 : content.safelist)) return content.safelist;\n    if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.safelist)) return purge.safelist;\n    if (Array.isArray(purge === null || purge === void 0 ? void 0 : (ref = purge.options) === null || ref === void 0 ? void 0 : ref.safelist)) return purge.options.safelist;\n    return [];\n  }(); // Normalize prefix option\n\n\n  if (typeof config.prefix === 'function') {\n    _log.default.warn('prefix-function', ['As of Tailwind CSS v3.0, `prefix` cannot be a function.', 'Update `prefix` in your configuration to be a string to eliminate this warning.', 'https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function']);\n\n    config.prefix = '';\n  } else {\n    var _prefix;\n\n    config.prefix = (_prefix = config.prefix) !== null && _prefix !== void 0 ? _prefix : '';\n  } // Normalize the `content`\n\n\n  config.content = {\n    files: function () {\n      var content = config.content,\n          purge = config.purge;\n      if (Array.isArray(purge)) return purge;\n      if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.content)) return purge.content;\n      if (Array.isArray(content)) return content;\n      if (Array.isArray(content === null || content === void 0 ? void 0 : content.content)) return content.content;\n      if (Array.isArray(content === null || content === void 0 ? void 0 : content.files)) return content.files;\n      return [];\n    }(),\n    extract: function () {\n      var extract = function () {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if ((ref = config.purge) === null || ref === void 0 ? void 0 : ref.extract) return config.purge.extract;\n        if ((ref1 = config.content) === null || ref1 === void 0 ? void 0 : ref1.extract) return config.content.extract;\n        if ((ref2 = config.purge) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.extract) === null || ref3 === void 0 ? void 0 : ref3.DEFAULT) return config.purge.extract.DEFAULT;\n        if ((ref4 = config.content) === null || ref4 === void 0 ? void 0 : (ref5 = ref4.extract) === null || ref5 === void 0 ? void 0 : ref5.DEFAULT) return config.content.extract.DEFAULT;\n        if ((ref6 = config.purge) === null || ref6 === void 0 ? void 0 : (ref7 = ref6.options) === null || ref7 === void 0 ? void 0 : ref7.extractors) return config.purge.options.extractors;\n        if ((ref8 = config.content) === null || ref8 === void 0 ? void 0 : (ref9 = ref8.options) === null || ref9 === void 0 ? void 0 : ref9.extractors) return config.content.options.extractors;\n        return {};\n      }();\n\n      var extractors = {};\n\n      var defaultExtractor = function () {\n        var ref, ref10, ref11, ref12;\n\n        if ((ref = config.purge) === null || ref === void 0 ? void 0 : (ref10 = ref.options) === null || ref10 === void 0 ? void 0 : ref10.defaultExtractor) {\n          return config.purge.options.defaultExtractor;\n        }\n\n        if ((ref11 = config.content) === null || ref11 === void 0 ? void 0 : (ref12 = ref11.options) === null || ref12 === void 0 ? void 0 : ref12.defaultExtractor) {\n          return config.content.options.defaultExtractor;\n        }\n\n        return undefined;\n      }();\n\n      if (defaultExtractor !== undefined) {\n        extractors.DEFAULT = defaultExtractor;\n      } // Functions\n\n\n      if (typeof extract === 'function') {\n        extractors.DEFAULT = extract;\n      } else if (Array.isArray(extract)) {\n        var _iterator = _createForOfIteratorHelper(extract !== null && extract !== void 0 ? extract : []),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _step.value,\n                extensions = _step$value.extensions,\n                extractor = _step$value.extractor;\n\n            var _iterator2 = _createForOfIteratorHelper(extensions),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var extension = _step2.value;\n                extractors[extension] = extractor;\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else if (typeof extract === 'object' && extract !== null) {\n        Object.assign(extractors, extract);\n      }\n\n      return extractors;\n    }(),\n    transform: function () {\n      var transform = function () {\n        var ref, ref13, ref14, ref15, ref16, ref17;\n        if ((ref = config.purge) === null || ref === void 0 ? void 0 : ref.transform) return config.purge.transform;\n        if ((ref13 = config.content) === null || ref13 === void 0 ? void 0 : ref13.transform) return config.content.transform;\n        if ((ref14 = config.purge) === null || ref14 === void 0 ? void 0 : (ref15 = ref14.transform) === null || ref15 === void 0 ? void 0 : ref15.DEFAULT) return config.purge.transform.DEFAULT;\n        if ((ref16 = config.content) === null || ref16 === void 0 ? void 0 : (ref17 = ref16.transform) === null || ref17 === void 0 ? void 0 : ref17.DEFAULT) return config.content.transform.DEFAULT;\n        return {};\n      }();\n\n      var transformers = {};\n\n      if (typeof transform === 'function') {\n        transformers.DEFAULT = transform;\n      }\n\n      if (typeof transform === 'object' && transform !== null) {\n        Object.assign(transformers, transform);\n      }\n\n      return transformers;\n    }()\n  }; // Validate globs to prevent bogus globs.\n  // E.g.: `./src/*.{html}` is invalid, the `{html}` should just be `html`\n\n  var _iterator3 = _createForOfIteratorHelper(config.content.files),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var file = _step3.value;\n\n      if (typeof file === 'string' && /{([^,]*?)}/g.test(file)) {\n        _log.default.warn('invalid-glob-braces', [\"The glob pattern \".concat((0, _log).dim(file), \" in your Tailwind CSS configuration is invalid.\"), \"Update it to \".concat((0, _log).dim(file.replace(/{([^,]*?)}/g, '$1')), \" to silence this warning.\")]);\n\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  if (config.content.files.length === 0) {\n    _log.default.warn('content-problems', ['The `content` option in your Tailwind CSS configuration is missing or empty.', 'Configure your content sources or your generated CSS will be missing styles.', 'https://tailwindcss.com/docs/content-configuration']);\n  }\n\n  return config;\n}","map":null,"metadata":{},"sourceType":"script"}