{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseBoxShadowValue = parseBoxShadowValue;\nexports.formatBoxShadowValue = formatBoxShadowValue;\nvar KEYWORDS = new Set(['inset', 'inherit', 'initial', 'revert', 'unset']);\nvar COMMA = /\\,(?![^(]*\\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.\n;\nvar SPACE = /\\ +(?![^(]*\\))/g // Similar to the one above, but with spaces instead.\n;\nvar LENGTH = /^-?(\\d+|\\.\\d+)(.*?)$/g;\n\nfunction parseBoxShadowValue(input) {\n  var shadows = input.split(COMMA);\n  return shadows.map(function (shadow) {\n    var value = shadow.trim();\n    var result = {\n      raw: value\n    };\n    var parts = value.split(SPACE);\n    var seen = new Set();\n\n    var _iterator = _createForOfIteratorHelper(parts),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var part = _step.value;\n        // Reset index, since the regex is stateful.\n        LENGTH.lastIndex = 0; // Keyword\n\n        if (!seen.has('KEYWORD') && KEYWORDS.has(part)) {\n          result.keyword = part;\n          seen.add('KEYWORD');\n        } else if (LENGTH.test(part)) {\n          if (!seen.has('X')) {\n            result.x = part;\n            seen.add('X');\n          } else if (!seen.has('Y')) {\n            result.y = part;\n            seen.add('Y');\n          } else if (!seen.has('BLUR')) {\n            result.blur = part;\n            seen.add('BLUR');\n          } else if (!seen.has('SPREAD')) {\n            result.spread = part;\n            seen.add('SPREAD');\n          }\n        } else {\n          if (!result.color) {\n            result.color = part;\n          } else {\n            if (!result.unknown) result.unknown = [];\n            result.unknown.push(part);\n          }\n        }\n      } // Check if valid\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    result.valid = result.x !== undefined && result.y !== undefined;\n    return result;\n  });\n}\n\nfunction formatBoxShadowValue(shadows) {\n  return shadows.map(function (shadow) {\n    if (!shadow.valid) {\n      return shadow.raw;\n    }\n\n    return [shadow.keyword, shadow.x, shadow.y, shadow.blur, shadow.spread, shadow.color].filter(Boolean).join(' ');\n  }).join(', ');\n}","map":null,"metadata":{},"sourceType":"script"}