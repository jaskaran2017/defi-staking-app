{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flagEnabled = flagEnabled;\nexports.issueFlagNotices = issueFlagNotices;\nexports.default = void 0;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _log = _interopRequireDefault(require(\"./util/log\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar defaults = {\n  optimizeUniversalDefaults: false\n};\nvar featureFlags = {\n  future: [],\n  experimental: ['optimizeUniversalDefaults']\n};\n\nfunction flagEnabled(config, flag) {\n  if (featureFlags.future.includes(flag)) {\n    var ref;\n    var ref1, ref2;\n    return config.future === 'all' || ((ref2 = (ref1 = config === null || config === void 0 ? void 0 : (ref = config.future) === null || ref === void 0 ? void 0 : ref[flag]) !== null && ref1 !== void 0 ? ref1 : defaults[flag]) !== null && ref2 !== void 0 ? ref2 : false);\n  }\n\n  if (featureFlags.experimental.includes(flag)) {\n    var ref3;\n    var ref4, ref5;\n    return config.experimental === 'all' || ((ref5 = (ref4 = config === null || config === void 0 ? void 0 : (ref3 = config.experimental) === null || ref3 === void 0 ? void 0 : ref3[flag]) !== null && ref4 !== void 0 ? ref4 : defaults[flag]) !== null && ref5 !== void 0 ? ref5 : false);\n  }\n\n  return false;\n}\n\nfunction experimentalFlagsEnabled(config) {\n  if (config.experimental === 'all') {\n    return featureFlags.experimental;\n  }\n\n  var ref;\n  return Object.keys((ref = config === null || config === void 0 ? void 0 : config.experimental) !== null && ref !== void 0 ? ref : {}).filter(function (flag) {\n    return featureFlags.experimental.includes(flag) && config.experimental[flag];\n  });\n}\n\nfunction issueFlagNotices(config) {\n  if (process.env.JEST_WORKER_ID !== undefined) {\n    return;\n  }\n\n  if (experimentalFlagsEnabled(config).length > 0) {\n    var changes = experimentalFlagsEnabled(config).map(function (s) {\n      return _chalk.default.yellow(s);\n    }).join(', ');\n\n    _log.default.warn('experimental-flags-enabled', [\"You have enabled experimental features: \".concat(changes), 'Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.']);\n  }\n}\n\nvar _default = featureFlags;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}