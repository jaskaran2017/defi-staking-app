{"ast":null,"code":"/* Generated by `npm run build`, do not edit! */\n\"use strict\";\n\nmodule.exports = function (Parser) {\n  return /*@__PURE__*/function (Parser) {\n    function anonymous() {\n      Parser.apply(this, arguments);\n    }\n\n    if (Parser) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create(Parser && Parser.prototype);\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.readInt = function readInt(radix, len) {\n      // Hack: len is only != null for unicode escape sequences,\n      // where numeric separators are not allowed\n      if (len != null) {\n        return Parser.prototype.readInt.call(this, radix, len);\n      }\n\n      var start = this.pos,\n          total = 0,\n          acceptUnderscore = false;\n\n      for (;;) {\n        var code = this.input.charCodeAt(this.pos),\n            val = void 0;\n\n        if (code >= 97) {\n          val = code - 97 + 10;\n        } // a\n        else if (code == 95) {\n            if (!acceptUnderscore) {\n              this.raise(this.pos, \"Invalid numeric separator\");\n            }\n\n            ++this.pos;\n            acceptUnderscore = false;\n            continue;\n          } else if (code >= 65) {\n            val = code - 65 + 10;\n          } // A\n          else if (code >= 48 && code <= 57) {\n              val = code - 48;\n            } // 0-9\n            else {\n                val = Infinity;\n              }\n\n        if (val >= radix) {\n          break;\n        }\n\n        ++this.pos;\n        total = total * radix + val;\n        acceptUnderscore = true;\n      }\n\n      if (this.pos === start) {\n        return null;\n      }\n\n      if (!acceptUnderscore) {\n        this.raise(this.pos - 1, \"Invalid numeric separator\");\n      }\n\n      return total;\n    };\n\n    anonymous.prototype.readNumber = function readNumber(startsWithDot) {\n      var token = Parser.prototype.readNumber.call(this, startsWithDot);\n      var octal = this.end - this.start >= 2 && this.input.charCodeAt(this.start) === 48;\n      var stripped = this.getNumberInput(this.start, this.end);\n\n      if (stripped.length < this.end - this.start) {\n        if (octal) {\n          this.raise(this.start, \"Invalid number\");\n        }\n\n        this.value = parseFloat(stripped);\n      }\n\n      return token;\n    }; // This is used by acorn-bigint\n\n\n    anonymous.prototype.getNumberInput = function getNumberInput(start, end) {\n      return this.input.slice(start, end).replace(/_/g, \"\");\n    };\n\n    return anonymous;\n  }(Parser);\n};","map":null,"metadata":{},"sourceType":"script"}