{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = setupTrackingContext;\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _fastGlob = _interopRequireDefault(require(\"fast-glob\"));\n\nvar _quickLru = _interopRequireDefault(require(\"quick-lru\"));\n\nvar _normalizePath = _interopRequireDefault(require(\"normalize-path\"));\n\nvar _hashConfig = _interopRequireDefault(require(\"../util/hashConfig\"));\n\nvar _getModuleDependencies = _interopRequireDefault(require(\"../lib/getModuleDependencies\"));\n\nvar _resolveConfig = _interopRequireDefault(require(\"../public/resolve-config\"));\n\nvar _resolveConfigPath = _interopRequireDefault(require(\"../util/resolveConfigPath\"));\n\nvar _sharedState = require(\"./sharedState\");\n\nvar _setupContextUtils = require(\"./setupContextUtils\");\n\nvar _parseDependency = _interopRequireDefault(require(\"../util/parseDependency\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar configPathCache = new _quickLru.default({\n  maxSize: 100\n});\nvar candidateFilesCache = new WeakMap();\n\nfunction getCandidateFiles(context, tailwindConfig) {\n  if (candidateFilesCache.has(context)) {\n    return candidateFilesCache.get(context);\n  }\n\n  var candidateFiles = tailwindConfig.content.files.filter(function (item) {\n    return typeof item === 'string';\n  }).map(function (contentPath) {\n    return (0, _normalizePath).default(contentPath);\n  });\n  return candidateFilesCache.set(context, candidateFiles).get(context);\n} // Get the config object based on a path\n\n\nfunction getTailwindConfig(configOrPath) {\n  var userConfigPath = (0, _resolveConfigPath).default(configOrPath);\n\n  if (userConfigPath !== null) {\n    var _ref = configPathCache.get(userConfigPath) || [],\n        _ref2 = _slicedToArray(_ref, 4),\n        prevConfig = _ref2[0],\n        prevConfigHash = _ref2[1],\n        prevDeps = _ref2[2],\n        prevModified = _ref2[3];\n\n    var newDeps = (0, _getModuleDependencies).default(userConfigPath).map(function (dep) {\n      return dep.file;\n    });\n    var modified = false;\n    var newModified = new Map();\n\n    var _iterator = _createForOfIteratorHelper(newDeps),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var file = _step.value;\n\n        var time = _fs.default.statSync(file).mtimeMs;\n\n        newModified.set(file, time);\n\n        if (!prevModified || !prevModified.has(file) || time > prevModified.get(file)) {\n          modified = true;\n        }\n      } // It hasn't changed (based on timestamps)\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (!modified) {\n      return [prevConfig, userConfigPath, prevConfigHash, prevDeps];\n    } // It has changed (based on timestamps), or first run\n\n\n    var _iterator2 = _createForOfIteratorHelper(newDeps),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var file1 = _step2.value;\n        delete require.cache[file1];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var _newConfig = (0, _resolveConfig).default(require(userConfigPath));\n\n    var newHash = (0, _hashConfig).default(_newConfig);\n    configPathCache.set(userConfigPath, [_newConfig, newHash, newDeps, newModified]);\n    return [_newConfig, userConfigPath, newHash, newDeps];\n  } // It's a plain object, not a path\n\n\n  var newConfig = (0, _resolveConfig).default(configOrPath.config === undefined ? configOrPath : configOrPath.config);\n  return [newConfig, null, (0, _hashConfig).default(newConfig), []];\n}\n\nfunction resolvedChangedContent(context, candidateFiles, fileModifiedMap) {\n  var changedContent = context.tailwindConfig.content.files.filter(function (item) {\n    return typeof item.raw === 'string';\n  }).map(function (_ref3) {\n    var raw = _ref3.raw,\n        _ref3$extension = _ref3.extension,\n        extension = _ref3$extension === void 0 ? 'html' : _ref3$extension;\n    return {\n      content: raw,\n      extension: extension\n    };\n  });\n\n  var _iterator3 = _createForOfIteratorHelper(resolveChangedFiles(candidateFiles, fileModifiedMap)),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var changedFile = _step3.value;\n\n      var content = _fs.default.readFileSync(changedFile, 'utf8');\n\n      var extension = _path.default.extname(changedFile).slice(1);\n\n      changedContent.push({\n        content: content,\n        extension: extension\n      });\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return changedContent;\n}\n\nfunction resolveChangedFiles(candidateFiles, fileModifiedMap) {\n  var changedFiles = new Set();\n  _sharedState.env.DEBUG && console.time('Finding changed files');\n\n  var files = _fastGlob.default.sync(candidateFiles);\n\n  var _iterator4 = _createForOfIteratorHelper(files),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var file = _step4.value;\n      var prevModified = fileModifiedMap.has(file) ? fileModifiedMap.get(file) : -Infinity;\n\n      var modified = _fs.default.statSync(file).mtimeMs;\n\n      if (modified > prevModified) {\n        changedFiles.add(file);\n        fileModifiedMap.set(file, modified);\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  _sharedState.env.DEBUG && console.timeEnd('Finding changed files');\n  return changedFiles;\n}\n\nfunction setupTrackingContext(configOrPath) {\n  return function (_ref4) {\n    var tailwindDirectives = _ref4.tailwindDirectives,\n        registerDependency = _ref4.registerDependency,\n        applyDirectives = _ref4.applyDirectives;\n    return function (root, result) {\n      var _getTailwindConfig = getTailwindConfig(configOrPath),\n          _getTailwindConfig2 = _slicedToArray(_getTailwindConfig, 4),\n          tailwindConfig = _getTailwindConfig2[0],\n          userConfigPath = _getTailwindConfig2[1],\n          tailwindConfigHash = _getTailwindConfig2[2],\n          configDependencies = _getTailwindConfig2[3];\n\n      var contextDependencies = new Set(configDependencies); // If there are no @tailwind or @apply rules, we don't consider this CSS\n      // file or its dependencies to be dependencies of the context. Can reuse\n      // the context even if they change. We may want to think about `@layer`\n      // being part of this trigger too, but it's tough because it's impossible\n      // for a layer in one file to end up in the actual @tailwind rule in\n      // another file since independent sources are effectively isolated.\n\n      if (tailwindDirectives.size > 0 || applyDirectives.size > 0) {\n        // Add current css file as a context dependencies.\n        contextDependencies.add(result.opts.from); // Add all css @import dependencies as context dependencies.\n\n        var _iterator5 = _createForOfIteratorHelper(result.messages),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var message = _step5.value;\n\n            if (message.type === 'dependency') {\n              contextDependencies.add(message.file);\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n\n      var _getContext = (0, _setupContextUtils).getContext(root, result, tailwindConfig, userConfigPath, tailwindConfigHash, contextDependencies),\n          _getContext2 = _slicedToArray(_getContext, 1),\n          context = _getContext2[0];\n\n      var candidateFiles = getCandidateFiles(context, tailwindConfig); // If there are no @tailwind or @apply rules, we don't consider this CSS file or it's\n      // dependencies to be dependencies of the context. Can reuse the context even if they change.\n      // We may want to think about `@layer` being part of this trigger too, but it's tough\n      // because it's impossible for a layer in one file to end up in the actual @tailwind rule\n      // in another file since independent sources are effectively isolated.\n\n      if (tailwindDirectives.size > 0 || applyDirectives.size > 0) {\n        var fileModifiedMap = (0, _setupContextUtils).getFileModifiedMap(context); // Add template paths as postcss dependencies.\n\n        var _iterator6 = _createForOfIteratorHelper(candidateFiles),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var fileOrGlob = _step6.value;\n            var dependency = (0, _parseDependency).default(fileOrGlob);\n\n            if (dependency) {\n              registerDependency(dependency);\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        var _iterator7 = _createForOfIteratorHelper(resolvedChangedContent(context, candidateFiles, fileModifiedMap)),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var changedContent = _step7.value;\n            context.changedContent.push(changedContent);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(configDependencies),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var file = _step8.value;\n          registerDependency({\n            type: 'dependency',\n            file: file\n          });\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return context;\n    };\n  };\n}","map":null,"metadata":{},"sourceType":"script"}