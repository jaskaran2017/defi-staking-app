{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeTailwindDirectives;\n\nvar _log = _interopRequireDefault(require(\"../util/log\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction normalizeTailwindDirectives(root) {\n  var tailwindDirectives = new Set();\n  var layerDirectives = new Set();\n  var applyDirectives = new Set();\n  root.walkAtRules(function (atRule) {\n    if (atRule.name === 'apply') {\n      applyDirectives.add(atRule);\n    }\n\n    if (atRule.name === 'import') {\n      if (atRule.params === '\"tailwindcss/base\"' || atRule.params === \"'tailwindcss/base'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'base';\n      } else if (atRule.params === '\"tailwindcss/components\"' || atRule.params === \"'tailwindcss/components'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'components';\n      } else if (atRule.params === '\"tailwindcss/utilities\"' || atRule.params === \"'tailwindcss/utilities'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'utilities';\n      } else if (atRule.params === '\"tailwindcss/screens\"' || atRule.params === \"'tailwindcss/screens'\" || atRule.params === '\"tailwindcss/variants\"' || atRule.params === \"'tailwindcss/variants'\") {\n        atRule.name = 'tailwind';\n        atRule.params = 'variants';\n      }\n    }\n\n    if (atRule.name === 'tailwind') {\n      if (atRule.params === 'screens') {\n        atRule.params = 'variants';\n      }\n\n      tailwindDirectives.add(atRule.params);\n    }\n\n    if (['layer', 'responsive', 'variants'].includes(atRule.name)) {\n      if (['responsive', 'variants'].includes(atRule.name)) {\n        _log.default.warn(\"\".concat(atRule.name, \"-at-rule-deprecated\"), [\"The `@\".concat(atRule.name, \"` directive has been deprecated in Tailwind CSS v3.0.\"), \"Use `@layer utilities` or `@layer components` instead.\", 'https://tailwindcss.com/docs/upgrade-guide#replace-variants-with-layer']);\n      }\n\n      layerDirectives.add(atRule);\n    }\n  });\n\n  if (!tailwindDirectives.has('base') || !tailwindDirectives.has('components') || !tailwindDirectives.has('utilities')) {\n    var _iterator = _createForOfIteratorHelper(layerDirectives),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var rule = _step.value;\n\n        if (rule.name === 'layer' && ['base', 'components', 'utilities'].includes(rule.params)) {\n          if (!tailwindDirectives.has(rule.params)) {\n            throw rule.error(\"`@layer \".concat(rule.params, \"` is used but no matching `@tailwind \").concat(rule.params, \"` directive is present.\"));\n          }\n        } else if (rule.name === 'responsive') {\n          if (!tailwindDirectives.has('utilities')) {\n            throw rule.error('`@responsive` is used but `@tailwind utilities` is missing.');\n          }\n        } else if (rule.name === 'variants') {\n          if (!tailwindDirectives.has('utilities')) {\n            throw rule.error('`@variants` is used but `@tailwind utilities` is missing.');\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return {\n    tailwindDirectives: tailwindDirectives,\n    applyDirectives: applyDirectives\n  };\n}","map":null,"metadata":{},"sourceType":"script"}