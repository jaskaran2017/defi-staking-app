{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isValidArbitraryValue;\nvar matchingBrackets = new Map([['{', '}'], ['[', ']'], ['(', ')']]);\nvar inverseMatchingBrackets = new Map(Array.from(matchingBrackets.entries()).map(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      k = _ref2[0],\n      v = _ref2[1];\n\n  return [v, k];\n}));\nvar quotes = new Set(['\"', \"'\", '`']);\n\nfunction isValidArbitraryValue(value) {\n  var stack = [];\n  var inQuotes = false;\n\n  for (var i = 0; i < value.length; i++) {\n    var char = value[i];\n\n    if (char === ':' && !inQuotes && stack.length === 0) {\n      return false;\n    } // Non-escaped quotes allow us to \"allow\" anything in between\n\n\n    if (quotes.has(char) && value[i - 1] !== '\\\\') {\n      inQuotes = !inQuotes;\n    }\n\n    if (inQuotes) continue;\n    if (value[i - 1] === '\\\\') continue; // Escaped\n\n    if (matchingBrackets.has(char)) {\n      stack.push(char);\n    } else if (inverseMatchingBrackets.has(char)) {\n      var inverse = inverseMatchingBrackets.get(char); // Nothing to pop from, therefore it is unbalanced\n\n      if (stack.length <= 0) {\n        return false;\n      } // Popped value must match the inverse value, otherwise it is unbalanced\n\n\n      if (stack.pop() !== inverse) {\n        return false;\n      }\n    }\n  } // If there is still something on the stack, it is also unbalanced\n\n\n  if (stack.length > 0) {\n    return false;\n  } // All good, totally balanced!\n\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}