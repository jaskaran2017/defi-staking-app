{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;\n\nvar utils = require(\"../utils\");\n\nfunction generate(patterns, settings) {\n  var positivePatterns = getPositivePatterns(patterns);\n  var negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);\n  var staticPatterns = positivePatterns.filter(function (pattern) {\n    return utils.pattern.isStaticPattern(pattern, settings);\n  });\n  var dynamicPatterns = positivePatterns.filter(function (pattern) {\n    return utils.pattern.isDynamicPattern(pattern, settings);\n  });\n  var staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns,\n  /* dynamic */\n  false);\n  var dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns,\n  /* dynamic */\n  true);\n  return staticTasks.concat(dynamicTasks);\n}\n\nexports.generate = generate;\n/**\n * Returns tasks grouped by basic pattern directories.\n *\n * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.\n * This is necessary because directory traversal starts at the base directory and goes deeper.\n */\n\nfunction convertPatternsToTasks(positive, negative, dynamic) {\n  var tasks = [];\n  var patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);\n  var patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);\n  var outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);\n  var insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);\n  tasks.push.apply(tasks, _toConsumableArray(convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic)));\n  /*\n   * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory\n   * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.\n   */\n\n  if ('.' in insideCurrentDirectoryGroup) {\n    tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));\n  } else {\n    tasks.push.apply(tasks, _toConsumableArray(convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic)));\n  }\n\n  return tasks;\n}\n\nexports.convertPatternsToTasks = convertPatternsToTasks;\n\nfunction getPositivePatterns(patterns) {\n  return utils.pattern.getPositivePatterns(patterns);\n}\n\nexports.getPositivePatterns = getPositivePatterns;\n\nfunction getNegativePatternsAsPositive(patterns, ignore) {\n  var negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);\n  var positive = negative.map(utils.pattern.convertToPositivePattern);\n  return positive;\n}\n\nexports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;\n\nfunction groupPatternsByBaseDirectory(patterns) {\n  var group = {};\n  return patterns.reduce(function (collection, pattern) {\n    var base = utils.pattern.getBaseDirectory(pattern);\n\n    if (base in collection) {\n      collection[base].push(pattern);\n    } else {\n      collection[base] = [pattern];\n    }\n\n    return collection;\n  }, group);\n}\n\nexports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;\n\nfunction convertPatternGroupsToTasks(positive, negative, dynamic) {\n  return Object.keys(positive).map(function (base) {\n    return convertPatternGroupToTask(base, positive[base], negative, dynamic);\n  });\n}\n\nexports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;\n\nfunction convertPatternGroupToTask(base, positive, negative, dynamic) {\n  return {\n    dynamic: dynamic,\n    positive: positive,\n    negative: negative,\n    base: base,\n    patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))\n  };\n}\n\nexports.convertPatternGroupToTask = convertPatternGroupToTask;","map":null,"metadata":{},"sourceType":"script"}