{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = processTailwindFeatures;\n\nvar _normalizeTailwindDirectives = _interopRequireDefault(require(\"./lib/normalizeTailwindDirectives\"));\n\nvar _expandTailwindAtRules = _interopRequireDefault(require(\"./lib/expandTailwindAtRules\"));\n\nvar _expandApplyAtRules = _interopRequireDefault(require(\"./lib/expandApplyAtRules\"));\n\nvar _evaluateTailwindFunctions = _interopRequireDefault(require(\"./lib/evaluateTailwindFunctions\"));\n\nvar _substituteScreenAtRules = _interopRequireDefault(require(\"./lib/substituteScreenAtRules\"));\n\nvar _resolveDefaultsAtRules = _interopRequireDefault(require(\"./lib/resolveDefaultsAtRules\"));\n\nvar _collapseAdjacentRules = _interopRequireDefault(require(\"./lib/collapseAdjacentRules\"));\n\nvar _collapseDuplicateDeclarations = _interopRequireDefault(require(\"./lib/collapseDuplicateDeclarations\"));\n\nvar _partitionApplyAtRules = _interopRequireDefault(require(\"./lib/partitionApplyAtRules\"));\n\nvar _detectNesting = _interopRequireDefault(require(\"./lib/detectNesting\"));\n\nvar _setupContextUtils = require(\"./lib/setupContextUtils\");\n\nvar _featureFlags = require(\"./featureFlags\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction processTailwindFeatures(setupContext) {\n  return function (root, result) {\n    var _default = (0, _normalizeTailwindDirectives).default(root),\n        tailwindDirectives = _default.tailwindDirectives,\n        applyDirectives = _default.applyDirectives;\n\n    (0, _detectNesting).default()(root, result); // Partition apply rules that are found in the css\n    // itself.\n\n    (0, _partitionApplyAtRules).default()(root, result);\n    var context = setupContext({\n      tailwindDirectives: tailwindDirectives,\n      applyDirectives: applyDirectives,\n      registerDependency: function registerDependency(dependency) {\n        result.messages.push(_objectSpread({\n          plugin: 'tailwindcss',\n          parent: result.opts.from\n        }, dependency));\n      },\n      createContext: function createContext(tailwindConfig, changedContent) {\n        return (0, _setupContextUtils).createContext(tailwindConfig, changedContent, root);\n      }\n    })(root, result);\n\n    if (context.tailwindConfig.separator === '-') {\n      throw new Error(\"The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.\");\n    }\n\n    (0, _featureFlags).issueFlagNotices(context.tailwindConfig);\n    (0, _expandTailwindAtRules).default(context)(root, result); // Partition apply rules that are generated by\n    // addComponents, addUtilities and so on.\n\n    (0, _partitionApplyAtRules).default()(root, result);\n    (0, _expandApplyAtRules).default(context)(root, result);\n    (0, _evaluateTailwindFunctions).default(context)(root, result);\n    (0, _substituteScreenAtRules).default(context)(root, result);\n    (0, _resolveDefaultsAtRules).default(context)(root, result);\n    (0, _collapseAdjacentRules).default(context)(root, result);\n    (0, _collapseDuplicateDeclarations).default(context)(root, result);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}