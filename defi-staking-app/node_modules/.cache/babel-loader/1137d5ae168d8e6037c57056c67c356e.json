{"ast":null,"code":"'use strict';\n/*\n * merge2\n * https://github.com/teambition/merge2\n *\n * Copyright (c) 2014-2020 Teambition\n * Licensed under the MIT license.\n */\n\nvar Stream = require('stream');\n\nvar PassThrough = Stream.PassThrough;\nvar slice = Array.prototype.slice;\nmodule.exports = merge2;\n\nfunction merge2() {\n  var streamsQueue = [];\n  var args = slice.call(arguments);\n  var merging = false;\n  var options = args[args.length - 1];\n\n  if (options && !Array.isArray(options) && options.pipe == null) {\n    args.pop();\n  } else {\n    options = {};\n  }\n\n  var doEnd = options.end !== false;\n  var doPipeError = options.pipeError === true;\n\n  if (options.objectMode == null) {\n    options.objectMode = true;\n  }\n\n  if (options.highWaterMark == null) {\n    options.highWaterMark = 64 * 1024;\n  }\n\n  var mergedStream = PassThrough(options);\n\n  function addStream() {\n    for (var i = 0, len = arguments.length; i < len; i++) {\n      streamsQueue.push(pauseStreams(arguments[i], options));\n    }\n\n    mergeStream();\n    return this;\n  }\n\n  function mergeStream() {\n    if (merging) {\n      return;\n    }\n\n    merging = true;\n    var streams = streamsQueue.shift();\n\n    if (!streams) {\n      process.nextTick(endStream);\n      return;\n    }\n\n    if (!Array.isArray(streams)) {\n      streams = [streams];\n    }\n\n    var pipesCount = streams.length + 1;\n\n    function next() {\n      if (--pipesCount > 0) {\n        return;\n      }\n\n      merging = false;\n      mergeStream();\n    }\n\n    function pipe(stream) {\n      function onend() {\n        stream.removeListener('merge2UnpipeEnd', onend);\n        stream.removeListener('end', onend);\n\n        if (doPipeError) {\n          stream.removeListener('error', onerror);\n        }\n\n        next();\n      }\n\n      function onerror(err) {\n        mergedStream.emit('error', err);\n      } // skip ended stream\n\n\n      if (stream._readableState.endEmitted) {\n        return next();\n      }\n\n      stream.on('merge2UnpipeEnd', onend);\n      stream.on('end', onend);\n\n      if (doPipeError) {\n        stream.on('error', onerror);\n      }\n\n      stream.pipe(mergedStream, {\n        end: false\n      }); // compatible for old stream\n\n      stream.resume();\n    }\n\n    for (var i = 0; i < streams.length; i++) {\n      pipe(streams[i]);\n    }\n\n    next();\n  }\n\n  function endStream() {\n    merging = false; // emit 'queueDrain' when all streams merged.\n\n    mergedStream.emit('queueDrain');\n\n    if (doEnd) {\n      mergedStream.end();\n    }\n  }\n\n  mergedStream.setMaxListeners(0);\n  mergedStream.add = addStream;\n  mergedStream.on('unpipe', function (stream) {\n    stream.emit('merge2UnpipeEnd');\n  });\n\n  if (args.length) {\n    addStream.apply(null, args);\n  }\n\n  return mergedStream;\n} // check and pause streams for pipe.\n\n\nfunction pauseStreams(streams, options) {\n  if (!Array.isArray(streams)) {\n    // Backwards-compat with old-style streams\n    if (!streams._readableState && streams.pipe) {\n      streams = streams.pipe(PassThrough(options));\n    }\n\n    if (!streams._readableState || !streams.pause || !streams.pipe) {\n      throw new Error('Only readable stream can be merged.');\n    }\n\n    streams.pause();\n  } else {\n    for (var i = 0, len = streams.length; i < len; i++) {\n      streams[i] = pauseStreams(streams[i], options);\n    }\n  }\n\n  return streams;\n}","map":null,"metadata":{},"sourceType":"script"}