{"ast":null,"code":"import _regeneratorRuntime from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"./sub-components/Navbar\";\nimport Web3 from \"web3\"; // import { loadavg } from \"os\";\n\nvar App = function App() {\n  var _useState = useState(\"0x0\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  useEffect(function () {\n    //This loadProvider method will detect metaMask and if present will connect the app to it.\n    // Otherwise it will raise an alert/warning \n    var loadProvider = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 3;\n                return new Web3(window.ethereum);\n\n              case 3:\n                window.web3 = _context.sent;\n                _context.next = 6;\n                return window.ethereum.enable();\n\n              case 6:\n                _context.next = 15;\n                break;\n\n              case 8:\n                if (!window.web3) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _context.next = 11;\n                return new Web3(window.web3.currentProvider);\n\n              case 11:\n                window.web3 = _context.sent;\n                _context.next = 15;\n                break;\n\n              case 14:\n                window.alert(\"Download MetaMask to run this application!\");\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function loadProvider() {\n        return _ref.apply(this, arguments);\n      };\n    }(); // const loadProvider = async () => {\n    //   await console.log(window.web3);\n    //   await console.log(window.ethereum);\n    //   // console.log(\"Metamask not detected.\");\n    // };\n\n\n    loadProvider(); // Web3();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    account: account,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/apple/Desktop/remix_udamy/udamy_project/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","useState","useEffect","Navbar","Web3","App","account","setAccount","loadProvider","window","ethereum","web3","enable","currentProvider","alert"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,kBACcJ,QAAQ,CAAC,KAAD,CADtB;AAAA;AAAA,MACTK,OADS;AAAA,MACAC,UADA;;AAGhBL,EAAAA,SAAS,CAAC,YAAM;AACd;AACA;AACG,QAAMM,YAAY;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA,qBAClBC,MAAM,CAACC,QADW;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEA,IAAIN,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAFA;;AAAA;AAEpBD,gBAAAA,MAAM,CAACE,IAFa;AAAA;AAAA,uBAGdF,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAHc;;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAIXH,MAAM,CAACE,IAJI;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAKA,IAAIP,IAAJ,CAASK,MAAM,CAACE,IAAP,CAAYE,eAArB,CALA;;AAAA;AAKpBJ,gBAAAA,MAAM,CAACE,IALa;AAAA;AAAA;;AAAA;AAOpBF,gBAAAA,MAAM,CAACK,KAAP,CAAa,4CAAb;;AAPoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZN,YAAY;AAAA;AAAA;AAAA,OAAlB,CAHW,CAcd;AACA;AACA;AAEA;AACA;;;AACAA,IAAAA,YAAY,GApBE,CAqBd;AACD,GAtBQ,EAsBN,EAtBM,CAAT;AAwBA,sBACE,uDACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEF,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAhCD;;AAkCA,eAAeD,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./sub-components/Navbar\";\nimport Web3 from \"web3\";\n\n// import { loadavg } from \"os\";\n\nconst App = () => {\n  const [account, setAccount] = useState(\"0x0\");\n\n  useEffect(() => {\n    //This loadProvider method will detect metaMask and if present will connect the app to it.\n    // Otherwise it will raise an alert/warning \n       const loadProvider = async () => {\n      if (window.ethereum) {\n        window.web3 = await new Web3(window.ethereum);\n        await window.ethereum.enable();\n      } else if (window.web3) {\n        window.web3 = await new Web3(window.web3.currentProvider);\n      } else {\n        window.alert(\"Download MetaMask to run this application!\");\n      }\n    };\n\n    // const loadProvider = async () => {\n    //   await console.log(window.web3);\n    //   await console.log(window.ethereum);\n\n    //   // console.log(\"Metamask not detected.\");\n    // };\n    loadProvider();\n    // Web3();\n  }, []);\n\n  return (\n    <>\n      <Navbar account={account} />\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}